[{"C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\index.js":"1","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\reportWebVitals.js":"2","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\App.js":"3","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\store\\store.js":"4","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\maincomponents\\AdminNavbar.js":"5","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\maincomponents\\People.js":"6","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\maincomponents\\NotFound.js":"7","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\maincomponents\\Dashboard.js":"8","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\maincomponents\\Login.js":"9","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\maincomponents\\Tests.js":"10","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\maincomponents\\AdminFooter.js":"11","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\maincomponents\\Questions.js":"12","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\maincomponents\\Response.js":"13","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\store\\reducers\\rootReducer.js":"14","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\store\\reducers\\authSlice.js":"15","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\store\\reducers\\testDetailsSlice.js":"16","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\store\\reducers\\testsSlice.js":"17","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\components\\TestBox.js":"18","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\components\\ResponsesList.js":"19","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\components\\TestControls.js":"20","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\components\\PeopleTable.js":"21","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\components\\ResponseEvaluation.js":"22","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\components\\Sections.js":"23","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\store\\reducers\\responsesSlice.js":"24","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\store\\reducers\\testRolesSlice.js":"25","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\store\\reducers\\questionsSlice.js":"26","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\components\\makeData.js":"27","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\components\\AddQuestions.js":"28","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\components\\DataTable.js":"29","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\components\\ExamRoles.js":"30","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\components\\QuestionsList.js":"31"},{"size":625,"mtime":1651614696093,"results":"32","hashOfConfig":"33"},{"size":362,"mtime":1651599553704,"results":"34","hashOfConfig":"33"},{"size":2456,"mtime":1651617148169,"results":"35","hashOfConfig":"33"},{"size":160,"mtime":1651599553810,"results":"36","hashOfConfig":"33"},{"size":3306,"mtime":1651620252681,"results":"37","hashOfConfig":"33"},{"size":3811,"mtime":1651619313570,"results":"38","hashOfConfig":"33"},{"size":414,"mtime":1651644596888,"results":"39","hashOfConfig":"33"},{"size":12681,"mtime":1651643962109,"results":"40","hashOfConfig":"33"},{"size":1907,"mtime":1651599556244,"results":"41","hashOfConfig":"33"},{"size":5411,"mtime":1651599557023,"results":"42","hashOfConfig":"33"},{"size":1487,"mtime":1651599556478,"results":"43","hashOfConfig":"33"},{"size":7467,"mtime":1651619695657,"results":"44","hashOfConfig":"33"},{"size":3535,"mtime":1651644598516,"results":"45","hashOfConfig":"33"},{"size":544,"mtime":1651599554570,"results":"46","hashOfConfig":"33"},{"size":756,"mtime":1651634336949,"results":"47","hashOfConfig":"33"},{"size":1010,"mtime":1651599554358,"results":"48","hashOfConfig":"33"},{"size":2871,"mtime":1651619954216,"results":"49","hashOfConfig":"33"},{"size":4168,"mtime":1651620610408,"results":"50","hashOfConfig":"33"},{"size":3213,"mtime":1651644592802,"results":"51","hashOfConfig":"33"},{"size":11633,"mtime":1651634009763,"results":"52","hashOfConfig":"33"},{"size":5022,"mtime":1651615859220,"results":"53","hashOfConfig":"33"},{"size":7767,"mtime":1651634626904,"results":"54","hashOfConfig":"33"},{"size":10356,"mtime":1651599554941,"results":"55","hashOfConfig":"33"},{"size":827,"mtime":1651599554077,"results":"56","hashOfConfig":"33"},{"size":2985,"mtime":1651620101642,"results":"57","hashOfConfig":"33"},{"size":5586,"mtime":1651634304587,"results":"58","hashOfConfig":"33"},{"size":920,"mtime":1651599555309,"results":"59","hashOfConfig":"33"},{"size":19178,"mtime":1651644588635,"results":"60","hashOfConfig":"33"},{"size":5409,"mtime":1651616162672,"results":"61","hashOfConfig":"33"},{"size":1533,"mtime":1651599555194,"results":"62","hashOfConfig":"33"},{"size":3222,"mtime":1651644590663,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"o3ih7k",{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"66"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"66"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"66"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"66"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"66"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"66"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"66"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"66"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"66"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"66"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"66"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"66"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"66"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144"},"C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\index.js",[],["145","146"],"C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\reportWebVitals.js",[],"C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\App.js",["147","148","149","150"],"import 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n// import './fontawesome.min.css';\nimport {Button, Row, Col} from 'react-bootstrap';\nimport AdminNavbar from './maincomponents/AdminNavbar';\nimport AdminFooter from './maincomponents/AdminFooter';\nimport Dashboard from './maincomponents/Dashboard';\nimport Tests from './maincomponents/Tests';\nimport People from './maincomponents/People';\nimport NotFound from './maincomponents/NotFound';\nimport Questions from './maincomponents/Questions';\nimport Login from './maincomponents/Login';\nimport Response from './maincomponents/Response';\nimport { BrowserRouter as Router , Routes, Route, Navigate } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\n\nfunction App() {\n  const state = useSelector((state) => state);\n  const dispatch = useDispatch();\n\n  console.log(state.authReducer.logStatus);\n\n  if(!state.authReducer.logStatus){\n    return(\n      <Router>\n      <div className=\"App\">\n        <AdminNavbar logStatus={state.authReducer.logStatus}/>\n\n        <div className='content'>\n          <Routes>\n            <Route \n              path=\"/\"\n              element={<Login/>}\n            />\n            <Route \n              path=\"*\"\n              element={\n                <Navigate to=\"/\" />\n              }\n            />\n          </Routes>\n        </div>\n        <AdminFooter />\n      </div>\n    </Router>\n    )\n  }\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <AdminNavbar logStatus={state.authReducer.logStatus}/>\n        \n        <div className='content'>\n          <Routes>\n            <Route path=\"/\" >\n              <Route index path=\"/\" element={<Dashboard />} />\n              <Route\n                path=\"/people\"\n                element={<People/>}\n              />\n              <Route\n                path=\"/tests\"\n                element={<Tests/>}\n              />\n              <Route\n                path=\"/test\"\n                element={<Questions/>}\n              />\n              <Route \n                path=\"/login\"\n                element={<Login/>}\n              />\n              <Route \n                path=\"/response\"\n                element={<Response/>}\n              />\n              <Route \n                path=\"*\"\n                element={<NotFound/>}\n                />\n            </Route>\n          </Routes>\n        </div>\n        <AdminFooter />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\store\\store.js",[],"C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\maincomponents\\AdminNavbar.js",["151","152","153","154"],"import {Container, Navbar, Nav, NavDropdown } from 'react-bootstrap';\r\nimport React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport { logout } from './../store/reducers/authSlice';\r\n\r\nfunction AdminNavbar(props) {\r\n    const dispatch = useDispatch();\r\n\r\n    const navitem = {\r\n        color: \"white\",\r\n        fontWeight: \"bold\",\r\n        // padding: \"15px 0px\",\r\n    };\r\n\r\n    return (\r\n        <div className='admin-nav'>\r\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"light\" variant=\"light\" className='fw-bolder p-2 border-bottom'>\r\n                <Container fluid>\r\n                    <Navbar.Brand as={Link} to=\"/\" bg=\"light\" variant=\"light\" className='fw-bold fs-2 margin-l'>RGUKT</Navbar.Brand>\r\n                    <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                    {props.logStatus ?\r\n                        <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                            <Nav className=\"me-auto\">\r\n\r\n                            </Nav>\r\n                            <Nav>\r\n                                <Nav.Link className={(navData) => (navData.isActive ? 'active nav-link' : 'nav-link')} as={NavLink} style={{marginRight: \"12px\"}} to=\"/\">Dashboard</Nav.Link>\r\n                                <Nav.Link className={(navData) => (navData.isActive ? 'active nav-link' : 'nav-link')} as={NavLink} style={{marginRight: \"12px\"}} to=\"/people\">Users</Nav.Link>\r\n                                {/* <Nav.Link className={(navData) => (navData.isActive ? 'active nav-link' : 'nav-link')} as={NavLink} style={{marginRight: \"12px\"}} to=\"/tests\">Tests</Nav.Link> */}\r\n                                <Nav.Link className={(navData) => (navData.isActive ? 'active nav-link' : 'nav-link')} as={NavLink} style={{marginRight: \"12px\"}} to=\"/test\">Test Deatils</Nav.Link>\r\n                                <Nav.Link className={(navData) => (navData.isActive ? 'active nav-link' : 'nav-link')} as={NavLink} style={{marginRight: \"12px\"}} to=\"/response\">Response</Nav.Link>\r\n                                <Nav.Link className={(navData) => (navData.isActive ? 'active nav-link' : 'nav-link')} as={NavLink} style={{marginRight: \"12px\"}} to=\"/proctor\">Logout</Nav.Link>\r\n\r\n                                {/* <NavDropdown title=\"Account\" id=\"collasible-nav-dropdown\">\r\n                                    <NavDropdown.Item to=\"/login\" as={NavLink} >Login</NavDropdown.Item>\r\n                                    \r\n                                    <NavDropdown.Item to=\"/profile\" as={NavLink}>Profile</NavDropdown.Item>\r\n                                    <NavDropdown.Item to=\"/sm\" as={NavLink}>Something</NavDropdown.Item>\r\n                                    <NavDropdown.Divider />\r\n                                    <NavDropdown.Item to=\"/login\" as={NavLink} onClick={() => dispatch(logout())}>Logout</NavDropdown.Item>\r\n                                </NavDropdown> */}\r\n                                \r\n                                \r\n                            </Nav>\r\n                        </Navbar.Collapse> :\r\n                        <></>\r\n                    }\r\n                </Container>\r\n            </Navbar>\r\n        </div>\r\n    );\r\n  }\r\n  \r\nexport default AdminNavbar;\r\n  \r\n ","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\maincomponents\\People.js",[],"C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\maincomponents\\NotFound.js",[],"C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\maincomponents\\Dashboard.js",["155","156","157","158","159"],"import {Button, Row, Col, Alert, Container, Card, Modal, Form, InputGroup, FloatingLabel} from 'react-bootstrap';\r\nimport { useState, useEffect } from 'react';\r\nimport TestBox from '../components/TestBox';\r\nimport { Typeahead } from 'react-bootstrap-typeahead';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { createTest } from './../store/reducers/testsSlice';\r\n// import NewTest from './../classes/NewTest.js';\r\n\r\nfunction MyVerticallyCenteredModal(props) {\r\n    const testsState = useSelector((state) => state.testsReducer);\r\n    const dispatch = useDispatch();\r\n\r\n    const [newTest, setNewTest] = useState({edit: true, isGroup: false, title: \"\", testMaker: [], description: \"\", instructions: \"\", groupName: [], year: \"\", branch: \"\", section: \"\"});\r\n    const [testValid, setTestValid] = useState(\r\n        {}\r\n    )\r\n    const onTestChange = (field, value) => {\r\n        setNewTest({\r\n            ...newTest,\r\n            [field]: value\r\n          })\r\n    }\r\n\r\n    const onCreateTest = () => {\r\n        \r\n        var tempValid = {}\r\n        if(newTest.title === \"\"){\r\n            tempValid = {\r\n                ...tempValid,\r\n                titleValid: \"invalid\"\r\n            }\r\n        }\r\n        if(newTest.testMaker.length === 0){\r\n            tempValid = {\r\n                ...tempValid,\r\n                testMakerValid: \"invalid\"\r\n            }\r\n        }\r\n        if(newTest.instructions === \"\"){\r\n            tempValid = {\r\n                ...tempValid,\r\n                instructionsValid: \"invalid\"\r\n            }\r\n        }\r\n        if(newTest.groupName.length === 0){\r\n            tempValid = {\r\n                ...tempValid,\r\n                groupNameValid: \"invalid\"\r\n            }\r\n        }\r\n        if(newTest.branch === \"\"){\r\n            tempValid = {\r\n                ...tempValid,\r\n                branchValid: \"invalid\"\r\n            }\r\n        }\r\n        if(newTest.year === \"\"){\r\n            tempValid = {\r\n                ...tempValid,\r\n                yearValid: \"invalid\"\r\n            }\r\n        }\r\n        if(newTest.section === \"\"){\r\n            tempValid = {\r\n                ...tempValid,\r\n                sectionValid: \"invalid\"\r\n            }\r\n        }\r\n\r\n        if(newTest.title && newTest.instructions && newTest.testMaker.length){\r\n            if(newTest.isGroup && newTest.groupName.length !=0){\r\n                console.log(\"Valid as group\");\r\n                dispatch( createTest(newTest) );\r\n                props.onHide();\r\n            }\r\n            else if(!newTest.isGroup && newTest.branch && newTest.year && newTest.section){\r\n                console.log(\"Valid as students\");\r\n                dispatch( createTest(newTest) );\r\n                props.onHide();\r\n            }\r\n            // console.log(\"Valid for now\");\r\n        }\r\n        setTestValid({...tempValid});\r\n    }\r\n    // const onSwitchAction = () => {\r\n    //     setIsSwitchOn(!isSwitchOn);\r\n    // };\r\n\r\n    return (\r\n      <Modal\r\n        {...props}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Create Test\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n            \r\n            <Form>\r\n                \r\n                <Row >\r\n                    <Col xs={12}>\r\n                        <Form.Group controlId=\"formGridTitle\" className=\"mb-2\">\r\n                            <Form.Label>Name of the test</Form.Label>\r\n                            <Form.Control placeholder=\"Enter Test Name\" \r\n                                onChange={ e => onTestChange('title', e.target.value) } \r\n                                value={newTest.title}\r\n                                isInvalid={testValid.titleValid === \"invalid\"}\r\n                            />\r\n\r\n                        </Form.Group>\r\n                    </Col>\r\n                    <Col >\r\n                        <Form.Group controlId=\"formGridPassword\" className=\"mb-2\">\r\n                            <Form.Label >\r\n                                Test Creator Name\r\n                            </Form.Label>\r\n                            <Typeahead\r\n                                id=\"selectEmail\"\r\n                                options={[\"uday@gmail.com\", \"reddy@gmail.com\", \"bhargav@gmail.com\", \"kashyap@gmail.com\"]}\r\n                                placeholder=\"Enter email\"\r\n                                onChange={ (selected) => {onTestChange('testMaker', selected)} } \r\n                                selected={newTest.testMaker}\r\n                                minLength={1}\r\n                                isInvalid={testValid.testMakerValid === \"invalid\"}\r\n\r\n                            />\r\n\r\n                        </Form.Group>\r\n                    </Col>\r\n                    \r\n\r\n                    \r\n\r\n                    <Col xs={12}>\r\n                        <Form.Group className=\"mb-2\" controlId=\"formGridAddress1\">\r\n                            <Form.Label>Description</Form.Label>\r\n                            <Form.Control placeholder=\"Description (optional)\" \r\n                                onChange={ e => onTestChange('description', e.target.value) } \r\n                                value={newTest.description}\r\n\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlTextarea1\">\r\n                            <Form.Label>Instructions for testmakers</Form.Label>\r\n                            <Form.Control as=\"textarea\" rows={3} \r\n                                onChange={ e => onTestChange('instructions', e.target.value) } \r\n                                value={newTest.instructions}\r\n                                isInvalid={testValid.instructionsValid === \"invalid\"}\r\n\r\n                            />\r\n                        </Form.Group>\r\n                    \r\n                    </Col>\r\n\r\n                    \r\n\r\n                    <Form.Group as={Col} md={6} controlId=\"formGridEdit\">\r\n                        <Form.Check \r\n                            onChange={e => onTestChange('edit', !newTest.edit)}\r\n                            checked={newTest.edit}\r\n                            type=\"switch\"\r\n                            id=\"custom-switch-edit\"\r\n                            label=\"Enable adding questions\"\r\n                        />\r\n                    </Form.Group>\r\n                    \r\n                    <Form.Group as={Col} md={6} controlId=\"formGridisGroup\" className=\"mb-2\">\r\n                        <Form.Check \r\n                            onChange={e => onTestChange('isGroup', !newTest.isGroup)}\r\n                            checked={newTest.isGroup}\r\n                            type=\"switch\"\r\n                            id=\"custom-switch-group\"\r\n                            label=\"Select from group\"\r\n                        />\r\n                    </Form.Group>\r\n                </Row>\r\n                <Row style={newTest.isGroup? {display: 'none'}: {}} >\r\n                    <Form.Label>Select student details</Form.Label>\r\n                    <Col md>\r\n                        <Form.Select aria-label=\"Floating label select example\"\r\n                            onChange={e => onTestChange('year', e.target.value)}\r\n                            className=\"mb-1\"\r\n                            isInvalid={testValid.yearValid === \"invalid\"}\r\n\r\n                        >\r\n                            <option value=\"\">Select year</option>\r\n                            <option value=\"1\">First</option>\r\n                            <option value=\"2\">Second</option>\r\n                            <option value=\"3\">Third</option>\r\n                            <option value=\"4\">Forth</option>\r\n\r\n                        </Form.Select>\r\n                    </Col>\r\n                    <Col md>\r\n                        <Form.Select aria-label=\"Floating label select example\"\r\n                            onChange={e => onTestChange('branch', e.target.value)}\r\n                            className=\"mb-1\"\r\n                            isInvalid={testValid.branchValid === \"invalid\"}\r\n                        >\r\n                            <option value=\"\">Select branch</option>\r\n                            <option value=\"1\">ECE</option>\r\n                            <option value=\"2\">CSE</option>\r\n                            <option value=\"3\">CIVIL</option>\r\n                            <option value=\"4\">MECH</option>\r\n                            <option value=\"5\">CHEM</option>\r\n                            <option value=\"6\">MME</option>\r\n                            <option value=\"7\">PUC</option>\r\n\r\n                        </Form.Select>\r\n                    </Col>\r\n                    <Col md>\r\n                        <Form.Select aria-label=\"Floating label select example\"\r\n                            onChange={e => onTestChange('section', e.target.value)}\r\n                            className=\"mb-1\"\r\n                            isInvalid={testValid.sectionValid === \"invalid\"}\r\n\r\n                        >\r\n                            <option value=\"\">Select section</option>\r\n                            <option value=\"0\">All</option>\r\n                            <option value=\"1\">One</option>\r\n                            <option value=\"2\">Two</option>\r\n                            <option value=\"3\">Three</option>\r\n\r\n                        </Form.Select>\r\n                    </Col>\r\n                </Row>\r\n                    \r\n                <Row style={newTest.isGroup? {}:{display: 'none'}}>\r\n                    <Col xs={12} >\r\n                        <Form.Group controlId=\"formGridPassword\" className=\"mb-1\">\r\n                            <Form.Label >\r\n                                Select Group\r\n                            </Form.Label>\r\n                            <Typeahead\r\n                                id=\"selectGroup\"\r\n                                options={[\"N16 Remedial\", \"N17 Remedial\", \"Longterm Interns\", \"N16 Regular\"]}\r\n                                placeholder=\"Group Name\"\r\n                                onChange={ (selected) => onTestChange('groupName', selected) } \r\n                                selected={newTest.groupName}\r\n                                minLength={1}\r\n                                isInvalid={testValid.groupNameValid === \"invalid\"}\r\n                            />\r\n                        </Form.Group>\r\n                    </Col>\r\n                </Row>\r\n\r\n                \r\n            </Form>\r\n\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button onClick={onCreateTest} className='btn-success'>Create</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  }\r\n\r\nfunction Dashboard() {\r\n    const [modalShow, setModalShow] = useState(false);\r\n    const testsState = useSelector((state) => state.testsReducer);\r\n\r\n    useEffect(() => {\r\n        document.title = `Dashboard`;\r\n      }, []);\r\n    \r\n    \r\n    return (\r\n        <div className=\"dashboard\">\r\n            <Container style={{paddingTop: '20px', paddingBottom: '20px'}}>\r\n                <Alert variant=\"success\" className='text-center bg-own'>\r\n                    <Alert.Heading>Welcome back Admin!</Alert.Heading>\r\n                    {/* <p>\r\n                    Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget\r\n                    lacinia odio sem nec elit. Cras mattis consectetur purus sit amet\r\n                    fermentum.\r\n                    </p> */}\r\n                    {/* <hr /> */}\r\n                </Alert>\r\n\r\n\r\n                <Row className=\"gutter-space\">\r\n                    <Col>\r\n                        <div className=\"create\" onClick={() => setModalShow(true)}>\r\n                            <h1 style={{fontSize: '40px'}}>+</h1>\r\n                            <p>create test</p>\r\n                        </div>\r\n                        <MyVerticallyCenteredModal\r\n                            show={modalShow}\r\n                            onHide={() => setModalShow(false)}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row className=\"gutter-space\">\r\n                    {\r\n                    testsState.map((test, index) => (\r\n                        <Col md={6} key={index}>\r\n                            <TestBox data={test}/>\r\n                        </Col>\r\n                    ))\r\n                    }\r\n                    \r\n                </Row>\r\n\r\n      \r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dashboard;\r\n\r\n\r\n\r\n\r\n\r\n","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\maincomponents\\Login.js",[],"C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\maincomponents\\Tests.js",[],"C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\maincomponents\\AdminFooter.js",["160","161","162","163"],"import {Button, Row, Col, Container, Nav} from 'react-bootstrap';\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport './../App.css';\r\n\r\nfunction AdminFooter() {\r\n    return (\r\n        <div className='admin-footer'>\r\n            <Container bg=\"dark\" variant=\"dark\"> \r\n                {/* <Row>\r\n                    <h6 style={{textAlign: 'center', marginBottom: '20px'}}>Rajiv Gandhi University of Knowledge Technologies, Nuzvid</h6>\r\n                    <hr/>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} md={4} >\r\n                        <p><Link to=\"/features\" variant=\"dark\">Dashboard</Link></p>\r\n                        <p><Link to=\"/pricing\">People</Link></p>\r\n                    </Col>\r\n                    <Col xs={12} md={4} >\r\n                        <p><Link to=\"#features\">Dashboard</Link></p>\r\n                        <p><Link to=\"#pricing\">People</Link></p>\r\n                    </Col>\r\n                    <Col xs={12} md={4} >\r\n                        <p><Link to=\"#features\">Dashboard</Link></p>\r\n                        <p><Link to=\"#pricing\">People</Link></p>\r\n                    </Col>\r\n                </Row> */}\r\n            \r\n                <Row>\r\n                    {/* <hr/> */}\r\n                    <p style={{textAlign: 'center', }}>&copy; All rights reserved @ RGUKT Nuzvid</p>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    );\r\n  }\r\n  \r\nexport default AdminFooter;\r\n  ","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\maincomponents\\Questions.js",["164","165","166","167","168","169","170","171","172","173"],"import {Tab, Container, Tabs, Accordion, Form, Row, Col, InputGroup, Button } from 'react-bootstrap';\r\nimport 'react-quill/dist/quill.snow.css';\r\nimport TestControls from '../components/TestControls';\r\nimport ResponsesList from '../components/ResponsesList';\r\nimport Sections from '../components/Sections';\r\nimport { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { updateTestDetails } from './../store/reducers/testDetailsSlice';\r\n\r\n\r\n\r\nvar today = new Date();\r\nvar minStartDate = today.getFullYear() + '-' + ('0' + (today.getMonth() + 1)).slice(-2) + '-' + ('0' + today.getDate()).slice(-2);\r\nvar minStartTime = ('0' + today.getHours()).slice(-2) + ':' + ('0' + today.getMinutes()).slice(-2);\r\nvar minStartDateTime = minStartDate + 'T'+ minStartTime;\r\n\r\nfunction Questions() {\r\n    const testDetails = useSelector((state) => state.testDetailsReducer);\r\n    const dispatch = useDispatch();\r\n\r\n    // [{ 'header': [false, 2, 3, 4] }],\r\n    useEffect(() => {\r\n        document.title = `Edit Test`;\r\n      }, []);\r\n\r\n    \r\n    const saveTestDetails = (e) => {\r\n        e.preventDefault();\r\n        const newTestDetails = {\r\n            testStartDateTime: e.target.testStartDateTime.value,\r\n            testEndDateTime: e.target.testEndDateTime.value,\r\n            studentInstructions: e.target.studentInstructions.value,\r\n        }\r\n        dispatch( updateTestDetails(\r\n            newTestDetails\r\n            ) );\r\n        // console.log(testDetails);\r\n    }\r\n    \r\n\r\n    return (\r\n        <div className='questions'>\r\n            <Container>\r\n                <h4>Exam Details </h4>\r\n                <hr/>\r\n                <Tabs defaultActiveKey=\"controls\" id=\"uncontrolled-tab-example\" className=\"mb-3\">\r\n                    {/* <Tab eventKey=\"details\" title=\"Details\"> */}\r\n                        {/* <h6> Instructions </h6> */}\r\n                        {/* <Accordion defaultActiveKey=\"0\">\r\n                            <Accordion.Item eventKey=\"0\">\r\n                                <Accordion.Header>Details</Accordion.Header>\r\n                                <Accordion.Body>\r\n                                    <Form onSubmit={(e) => saveTestDetails(e)}>\r\n                                        <Row>\r\n                                            <Col xs={12} sm={6} className=\"mb-2\">\r\n                                                <Form.Group>\r\n                                                    <Form.Label>Start Date & Time</Form.Label>\r\n                                                    <Form.Control\r\n                                                        type=\"datetime-local\"\r\n                                                        name=\"testStartDateTime\"\r\n                                                        defaultValue={testDetails.testStartDateTime}\r\n                                                        min={minStartDateTime}\r\n                                                        // onChange={(e) => handleChange('testStartDateTime', e.target.value)}\r\n                                                    >\r\n                                                    </Form.Control>\r\n                                                </Form.Group>\r\n                                            </Col>\r\n                                            \r\n                                            <Col xs={12} sm={6} className=\"mb-2\">\r\n                                                <Form.Group>\r\n                                                    <Form.Label>End Date & Time</Form.Label>\r\n                                                    <Form.Control\r\n                                                        type=\"datetime-local\"\r\n                                                        name=\"testEndDateTime\"\r\n                                                        defaultValue={testDetails.testEndDateTime}\r\n                                                        min={testDetails.testStartDateTime}\r\n                                                        // onChange={(e) => handleChange('testEndDateTime', e.target.value)}\r\n                                                    >\r\n                                                    </Form.Control>\r\n                                                </Form.Group>\r\n                                            </Col>\r\n\r\n                                        </Row>\r\n                                        <Row>\r\n                                            <Form.Group as={Col} xs={12} className=\"mb-2\">\r\n                                                <Form.Label>Instructions for students</Form.Label>\r\n                                                <Form.Control\r\n                                                    as=\"textarea\"\r\n                                                    name=\"studentInstructions\"\r\n                                                    rows={3}\r\n                                                    placeholder=\"Enter instructions..\"\r\n                                                    defaultValue={testDetails.studentInstructions}\r\n                                                    // onChange={(e) => handleChange('studentInstructions', e.target.value)}\r\n                                                >\r\n                                                </Form.Control>\r\n                                            </Form.Group>\r\n                                            <Col align=\"right\">\r\n                                                <Button variant='success' type=\"submit\">Save</Button>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </Form>\r\n                                    \r\n                                </Accordion.Body>\r\n                            </Accordion.Item>\r\n                            <Accordion.Item eventKey=\"1\">\r\n                                <Accordion.Header>Instructions for Testmakers</Accordion.Header>\r\n                                <Accordion.Body>\r\n                                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\r\n                                tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim\r\n                                veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea\r\n                                commodo consequat. Duis aute irure dolor in reprehenderit in voluptate\r\n                                velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat\r\n                                cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id\r\n                                est laborum.\r\n                                </Accordion.Body>\r\n                            </Accordion.Item>\r\n                        </Accordion> */}\r\n                    {/* </Tab> */}\r\n\r\n                    <Tab eventKey=\"questions\" title=\"Questions\">\r\n                        <h6>Sections</h6>\r\n\r\n                        <Sections />\r\n                    </Tab>\r\n\r\n                    <Tab eventKey=\"controls\" title=\"Controls\">\r\n                        <TestControls />\r\n                    </Tab>\r\n                    <Tab eventKey=\"responses\" title=\"Responses\">\r\n                        <ResponsesList />\r\n                    </Tab>\r\n                </Tabs>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Questions;","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\maincomponents\\Response.js",["174","175"],"import { Col, Container, Row, Table, Tab, Tabs, Accordion, Card, useAccordionButton } from \"react-bootstrap\";\nimport { useEffect, useState } from \"react\";\nimport ResponseEvaluation from \"../components/ResponseEvaluation\";\n\nfunction CustomToggle({ children, eventKey }) {\n    const [open, setOpen] = useState(true);\n\n    const decoratedOnClick = useAccordionButton(eventKey, () => {\n        console.log('totally custom!');\n        setOpen(!open);\n    });\n  \n    return (\n      <p\n        type=\"button\"\n        style={{ marginBottom: \"0px\" }}\n        onClick={decoratedOnClick}\n      >\n        {children} {open ? <i className=\"fa fa-caret-right fa-fw\" aria-hidden=\"true\"></i> : <i className=\"fa fa-caret-down fa-fw\" aria-hidden=\"true\"></i> }\n      </p>\n    );\n}\n\nfunction Response(){\n    useEffect(() => {\n        document.title = `Response`;\n      }, []);\n\n\n    return(\n        <div className=\"tests-page\">\n            <Container>\n                <h4>Response</h4>\n                <hr/>\n                <Accordion defaultActiveKey=\"0\" style={{marginBottom: \"10px\"}}>\n                    <Card>\n                        <Card.Header>\n                            <CustomToggle eventKey=\"0\">Details</CustomToggle>\n                        </Card.Header>\n\n\n                        <Accordion.Collapse eventKey=\"0\">\n                            <Table bordered responsive className=\"responseDetails\" style={{marginBottom: \"0px\", whiteSpace: \"nowrap\",}}>\n                                <tbody>\n                                    <tr>\n                                        <td>N160108</td>\n                                        <td>MANIKANTA PINDI</td>\n                                        <td>manikantapindi9087@gmail.com</td>\n                                        <td>E4 CSE</td>\n                                    </tr>\n                                    <tr>\n                                        <td><strong>TestID:</strong> T1280</td>\n                                        <td>E2 SEM2 - DATA MINING</td>\n                                        <td><strong>Duration Spent:</strong> 1hr 50min</td>\n                                        <td><strong>Submited at:</strong> 12 Jan 2022, 10:35PM</td>\n                                    </tr>\n                                    <tr>\n                                        <td><strong>Sections</strong>: 3</td>\n                                        <td><strong>Total Attempted Questions:</strong> 24/30</td>\n                                        <td><strong>Evaluation:</strong> 20/30</td>\n                                        <td><strong>Marks Scored:</strong> 76/100</td>\n                                    </tr>\n                                </tbody>\n                            </Table>\n                        </Accordion.Collapse>\n                    </Card>\n                    \n                </Accordion>\n\n                \n\n                <Tabs defaultActiveKey=\"section1\" id=\"sectionsResponses\" className=\"mb-3\">\n                    <Tab eventKey=\"section1\" title=\"Multiple Choice Questions\">\n                        <ResponseEvaluation />\n                    </Tab>\n                    <Tab eventKey=\"section2\" title=\"Descriptive\">\n                        <ResponseEvaluation />\n                    </Tab>\n                    {/* <Tab eventKey=\"section3\" title=\"Verbal Ability\">\n                        <ResponseEvaluation />\n                    </Tab> */}\n                </Tabs>\n            </Container>\n        </div>\n    )\n}\n\nexport default Response;","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\store\\reducers\\rootReducer.js",[],"C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\store\\reducers\\authSlice.js",[],"C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\store\\reducers\\testDetailsSlice.js",[],"C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\store\\reducers\\testsSlice.js",[],"C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\components\\TestBox.js",["176","177","178"],"import { Container, Card, Button, Row, Col } from 'react-bootstrap';\r\nimport React, { useState } from 'react';\r\n\r\nfunction TestBox(props) {\r\n    const [testData, setTestData] = useState(props.data);\r\n\r\n    //         {\r\n    //         testId: \"Test12097\",\r\n    //         title: \"E3 Sem1 Mathematics\", \r\n    //         desc: \"With supporting text below as a natural lead-in to additional content.\",\r\n    //         testMaker: \"prof@test.com\",\r\n    //         duration: '2hrs',\r\n    //         starttime: '12th Jan 8:00PM',\r\n    // } );\r\n\r\n\r\n    const navitem = {\r\n        color: \"white\",\r\n        fontWeight: \"bold\",\r\n        padding: \"15px 15px\",\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Card\r\n                className='testbox mt-4'\r\n            >\r\n                {/* <Card.Header style={{backgroundColor: '#9dffb7'}}>\r\n                    <Row>\r\n                        <Col xs={8}>\r\n                            <h5 style={{marginTop: '10px'}}>{testData.title}</h5>\r\n                        </Col>\r\n                        <Col xs={4} className=\"testbox-header\">\r\n                            <p className=\"testid\">{testData.testId}</p>\r\n                        </Col>\r\n                    </Row>\r\n                </Card.Header> */}\r\n                <Card.Body className='bg-own shadow-lg'>\r\n                    <Row>\r\n                        <Col xs={8}>\r\n                            <h5 style={{ marginTop: '10px' }} className='text-success'>{testData.title}</h5>\r\n                        </Col>\r\n                        <Col xs={4} className=\"testbox-header\">\r\n                            <p className=\"testid\">{testData.testId}</p>\r\n                        </Col>\r\n                    </Row>\r\n                    {/* <Card.Title>Special title treatment</Card.Title> */}\r\n                    <Card.Text style={{ marginBottom: '8px' }}>\r\n                        {/* {testData.description}\r\n                        <br /> */}\r\n                        {/* <b style={{ fontWeight: 500 }}>Test Maker:</b> {testData.testMaker} */}\r\n                    </Card.Text>\r\n                    <Card.Text style={{ marginBottom: '0px' }}>\r\n                        <b style={{ fontWeight: 500 }}>Duration:</b> {testData.duration} &nbsp; &nbsp; &nbsp; &nbsp;\r\n                        <b style={{ fontWeight: 500 }}>Start time:</b> {testData.startDateTime}\r\n                    </Card.Text>\r\n\r\n                    <Row>\r\n                        {/* <Col md={4} className=\"created-time\">\r\n                            <p>Created on 12 Jan 2021 By Bhargav Imandi</p>\r\n                        </Col> */}\r\n                        <Col md={12} style={{ textAlign: 'right' }} className='mt-3'>\r\n                            {/* <Button variant=\"outline-secondary\">Live <i className=\"fa fa-play-circle-o\" aria-hidden=\"true\"></i></Button> &nbsp;&nbsp; */}\r\n                            <Button variant=\"outline-secondary\">Preview <i className=\"fa fa-eye\" aria-hidden=\"true\"></i></Button> &nbsp;&nbsp;\r\n                            <Button variant=\"outline-success\">Open &nbsp;<i className=\"fa fa-external-link\" aria-hidden=\"true\"></i> </Button>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                </Card.Body>\r\n                {/* <Card.Footer style={{backgroundColor: 'white'}}>\r\n                    <Row> \r\n                        {/* <Col md={4} className=\"created-time\">\r\n                            <p>Created on 12 Jan 2021 By Bhargav Imandi</p>\r\n                        </Col> */}\r\n                {/* <Col md={12} style={{textAlign: 'right'}}>\r\n                            <Button variant=\"outline-secondary\">Live <i className=\"fa fa-play-circle-o\" aria-hidden=\"true\"></i></Button> &nbsp;&nbsp;\r\n                            <Button variant=\"outline-secondary\">Preview <i className=\"fa fa-eye\" aria-hidden=\"true\"></i></Button> &nbsp;&nbsp;\r\n                            <Button variant=\"info\">Open &nbsp;<i className=\"fa fa-external-link\" aria-hidden=\"true\"></i> </Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Card.Footer> /*/}\r\n            </Card>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default TestBox;","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\components\\ResponsesList.js",["179","180","181"],"import { Button, Table } from 'react-bootstrap';\nimport React, { useState } from 'react';\nimport { useMemo } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport DataTable from './DataTable';\nimport { useSelector } from 'react-redux';\nimport responsesSlice from '../store/reducers/responsesSlice';\n\nfunction ResponsesList() {\n    const responsesState = useSelector((state) => state.responsesReducer).repsonsesAll;\n\n    // Coping to new variable in such a way to make the redux state mutable. Else cannot add new attributes for table data\n    const responses = responsesState.map((res) => \n        Object.assign({}, res)\n    )\n    console.log(responses);\n\n    for(var i=0; i<responses.length; i++){\n        responses[i].id = i+1+'';\n        responses[i].open = \n            <Button as={NavLink} to={\"/response\"} size=\"sm\" style={{minWidth: \"30px\"}} className=\"tableSmallButton\">\n                <span>Open &nbsp;&nbsp;<i className='fa fa-caret-right' aria-hidden=\"true\"></i></span>\n            </Button>;\n        responses[i].details = \n            <NavLink to={\"/response/details\"} className=\"tableLink\">\n                View\n            </NavLink>;\n        responses[i].testtimePhotos = \n            <NavLink to={\"/response/photos\"} className=\"tableLink\">\n                Show\n            </NavLink>;\n            \n        // to style the status values inside table, but sort is not working\n        // switch(responses[i].evalStatus){\n        //     case 'Completed':\n        //         responses[i].evalStatus = \n        //             <Button variant=\"outline-success\" className='tableStatusButton' disabled>\n        //                 {responses[i].evalStatus}\n        //             </Button>;\n        //         break;\n        //     case 'Pending':\n        //         responses[i].evalStatus = \n        //             <Button variant=\"outline-secondary\" className='tableStatusButton' disabled>\n        //                 {responses[i].evalStatus + '...'}\n        //             </Button>;\n        //         break;\n        // }\n        \n    }\n\n    const columns = useMemo(\n        () => [\n            {\n            Header: 'S.No',\n            accessor: 'id'\n            },\n            {\n            Header: 'Response ID',\n            accessor: 'responseID',\n            },\n            {\n            Header: 'Student ID',\n            accessor: 'studentID',\n            },\n            {\n            Header: 'Submited at',\n            accessor: 'submitTime',\n            },\n            {\n            Header: 'Status',\n            accessor: 'evalStatus',\n            },\n            {\n            Header: 'Marks',\n            accessor: 'marksScored',\n            },\n            {\n            Header: 'Details',\n            accessor: 'details',\n            },\n            {\n            Header: 'Photos',\n            accessor: 'testtimePhotos',\n            },\n            {\n            Header: 'Open',\n            accessor: 'open',\n            },\n        ],\n        []\n    )\n    // const data = useMemo(() => makeData(200), []);\n\n    return (\n        <div>\n            <h6>Responses</h6>\n            <DataTable columns={columns} data={responses}/>\n        </div>\n    );\n}\n\nexport default ResponsesList;","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\components\\TestControls.js",["182"],"import {Tab, Nav, Row, Col, Card, Table, Button} from 'react-bootstrap';\nimport { Typeahead } from 'react-bootstrap-typeahead';\nimport ExamRoles from './ExamRoles';\nimport {useState} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addTestMaker, removeTestMaker, addProctor, removeProctor, addEvaluator, removeEvaluator } from './../store/reducers/testRolesSlice';\n\nfunction TestControls(){\n    const testRolesState = useSelector((state) => state.testRolesReducer);\n    const dispatch = useDispatch();\n\n    const facultyData = testRolesState.facultyAll;\n\n    const facultyEmails = facultyData.map(fac => fac.email);\n\n    const newTestmaker = (email) => {\n        dispatch( addTestMaker({email: email}) );\n    }\n\n    const remTestmaker = (idx) => {\n        dispatch( removeTestMaker({index: idx}) );\n    }\n\n    const newProctor = (email) => {\n        dispatch( addProctor({email: email}) );\n    }\n\n    const remProctor = (idx) => {\n        dispatch( removeProctor({index: idx}) );\n\n    }\n\n    const newEvaluator = (email) => {\n        dispatch( addEvaluator({email: email}) );\n\n    }\n\n    const remEvaluator = (idx) => {\n        dispatch( removeEvaluator({index: idx}) );\n    }\n\n    return (\n        <div>\n            <h6> Test Roles </h6>\n            <hr/>\n            <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"first\">\n                <Row>\n                    <Col>\n                    <Nav variant=\"pills\" className=\"flex-column text-dark\">\n                        <Nav.Item>\n                            <Nav.Link eventKey=\"first\"><i className=\"fa fa-user-circle-o\" aria-hidden=\"true\"></i> &nbsp;Students</Nav.Link>\n                        </Nav.Item>\n                        <Nav.Item>\n                            <Nav.Link eventKey=\"second\"><i className=\"fa fa-book\" aria-hidden=\"true\"></i> &nbsp;Test Creators</Nav.Link>\n                        </Nav.Item>\n                        <Nav.Item>\n                            <Nav.Link eventKey=\"third\"><i className=\"fa fa-video-camera\" aria-hidden=\"true\"></i> &nbsp;Proctors</Nav.Link>\n                        </Nav.Item>\n                        <Nav.Item>\n                            <Nav.Link eventKey=\"fourth\"><i className=\"fa fa-check-square-o\" aria-hidden=\"true\"></i> &nbsp;Evaluators</Nav.Link>\n                        </Nav.Item>\n                    </Nav>\n                    </Col>\n                </Row>\n                <Row className='mt-4'>\n                <Col>\n                    <Tab.Content>\n                        <Tab.Pane eventKey=\"first\">\n                            <ExamRoles name={\"Students\"} />\n                        </Tab.Pane>\n\n                        <Tab.Pane eventKey=\"second\">\n                            <Card>\n                                <Card.Body>\n                                    <Card.Title>Test Makers</Card.Title>\n                                    \n                                    <div>\n                                        <Typeahead\n                                            id=\"selectTestmaker\"\n                                            options={facultyEmails}\n                                            placeholder=\"Type email and select testmaker\"\n                                            onChange={ (selected) => newTestmaker(selected[0]) } \n                                            minLength={1}\n                                        />\n                                    \n                                        <br/>\n\n                                        <Table bordered hover responsive striped>\n                                            <thead>\n                                                <tr>\n                                                    <th>No.</th>\n                                                    <th>Name</th>\n                                                    <th>Email</th>\n                                                    <th>Remove</th>\n                                                </tr>\n                                            </thead>\n                                            <tbody>\n                                            {\n                                                testRolesState.testMakers.map((testmaker, idx) => (\n                                                    <tr key={idx}>\n                                                        <td>{idx+1}</td>\n                                                        <td>{testmaker.name}</td>\n                                                        <td>{testmaker.email}</td>\n                                                        <td>\n                                                            <Button size=\"sm\" variant=\"danger\" \n                                                                style={{padding: \"0px 8px\"}}\n                                                                onClick={(e) => remTestmaker(idx)}>\n                                                                Remove <i className=\"fa fa-trash\" aria-hidden=\"true\"></i>\n                                                            </Button>\n                                                        </td>\n                                                    </tr>\n                                                ))\n                                            }\n                                            </tbody>\n                                        </Table>\n                                    </div>\n                                </Card.Body>\n                            </Card>\n                        </Tab.Pane>\n\n                        <Tab.Pane eventKey=\"third\">  \n                            <Card>\n                                <Card.Body>\n                                    <Card.Title>Proctors</Card.Title>\n                                    \n                                    <div>\n                                        <Typeahead\n                                            id=\"selectProctor\"\n                                            options={facultyEmails}\n                                            placeholder=\"Type email and select proctor\"\n                                            onChange={ (selected) => newProctor(selected[0]) } \n                                            minLength={1}\n                                        />\n                                    \n                                        <br/>\n\n                                        <Table bordered hover responsive striped>\n                                            <thead>\n                                                <tr>\n                                                    <th>No.</th>\n                                                    <th>Name</th>\n                                                    <th>Email</th>\n                                                    <th>Remove</th>\n                                                </tr>\n                                            </thead>\n                                            <tbody>\n                                            {\n                                                testRolesState.proctors.map((proctor, idx) => (\n                                                    <tr key={idx}>\n                                                        <td>{idx+1}</td>\n                                                        <td>{proctor.name}</td>\n                                                        <td>{proctor.email}</td>\n                                                        <td>\n                                                            <Button size=\"sm\" variant=\"danger\" \n                                                                style={{padding: \"0px 8px\"}}\n                                                                onClick={(e) => remProctor(idx)}>\n                                                                Remove <i className=\"fa fa-trash\" aria-hidden=\"true\"></i>\n                                                            </Button>\n                                                        </td>\n                                                    </tr>\n                                                ))\n                                            }\n                                            </tbody>\n                                        </Table>\n                                    </div>\n                                </Card.Body>\n                            </Card>\n                        </Tab.Pane>\n\n                        <Tab.Pane eventKey=\"fourth\">\n                            <Card>\n                                <Card.Body>\n                                    <Card.Title>Evaluators</Card.Title>\n                                    \n                                    <div>\n                                        <Typeahead\n                                            id=\"selectEvaluator\"\n                                            options={facultyEmails}\n                                            placeholder=\"Type email and select evaluator\"\n                                            onChange={ (selected) => newEvaluator(selected[0]) } \n                                            minLength={1}\n                                        />\n                                    \n                                        <br/>\n\n                                        <Table bordered hover responsive striped >\n                                            <thead>\n                                                <tr>\n                                                    <th>No.</th>\n                                                    <th>Name</th>\n                                                    <th>Email</th>\n                                                    <th>Remove</th>\n                                                </tr>\n                                            </thead>\n                                            <tbody>\n                                            {\n                                                testRolesState.evaluators.map((proctor, idx) => (\n                                                    <tr key={idx}>\n                                                        <td>{idx+1}</td>\n                                                        <td>{proctor.name}</td>\n                                                        <td>{proctor.email}</td>\n                                                        <td>\n                                                            <Button size=\"sm\" variant=\"danger\" \n                                                                onClick={(e) => remEvaluator(idx)}\n                                                                style={{padding: \"0px 8px\"}}\n                                                            >\n                                                                Remove <i className=\"fa fa-trash\" aria-hidden=\"true\"></i>\n                                                            </Button>\n                                                        </td>\n                                                    </tr>\n                                                ))\n                                            }\n                                            </tbody>\n                                        </Table>\n                                    </div>\n                                </Card.Body>\n                            </Card>\n                        </Tab.Pane>\n                    </Tab.Content>\n                    </Col>\n                </Row>\n            </Tab.Container>\n        </div>\n    );\n}\n\nexport default TestControls;","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\components\\PeopleTable.js",["183"],"import { Card, Button, ButtonGroup, Modal, Row, Col, Form} from 'react-bootstrap';\r\nimport DataTable from './DataTable';\r\nimport { useState, useMemo } from 'react';\r\nimport makeData from './makeData';\r\n\r\nfunction ActionModal(props) {\r\n    return (\r\n      <Modal\r\n        {...props}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            {props.heading + \" \" + props.name}\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          {/* <h4>Centered Modal</h4> */}\r\n          <Form.Control type=\"file\" accept=\".xlsx, .xls, .csv\"/>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button onClick={props.onHide}>{props.heading}</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  }\r\n\r\nfunction PeopleTable(props) {\r\n    const [modalShow, setModalShow] = useState(false);\r\n\r\n    const openFileUpload = () => {\r\n        document.getElementById(\"importpeoplefileupload\").click();\r\n    }\r\n\r\n    const columns = useMemo(\r\n        () => [\r\n          {\r\n            Header: 'First Name',\r\n            accessor: 'firstName'\r\n          },\r\n          {\r\n            Header: 'Last Name',\r\n            accessor: 'lastName',\r\n          },\r\n          {\r\n            Header: 'Age',\r\n            accessor: 'age',\r\n          },\r\n          {\r\n            Header: 'Visits',\r\n            accessor: 'visits',\r\n          },\r\n          {\r\n            Header: 'Branch',\r\n            accessor: 'status',\r\n          },\r\n          {\r\n            Header: 'Profile Progress',\r\n            accessor: 'progress',\r\n          },\r\n        ],\r\n        []\r\n    );\r\n\r\n    const data = useMemo(() => makeData(200), []);\r\n    console.log(data);\r\n\r\n    return (\r\n        <div className='people-table'>\r\n            <Card>\r\n                <Card.Body>\r\n                    <Card.Title>{props.name}</Card.Title>\r\n                    <div>\r\n                        <Row>\r\n                            {/* <Col md={6} sm={12}>\r\n                                <InputGroup className=\"mb-3\">\r\n                                    <FormControl\r\n                                    placeholder=\"Search\"\r\n                                    aria-label=\"search\"\r\n                                    aria-describedby=\"basic-addon2\"\r\n                                    />\r\n                                    <Button variant=\"outline-secondary\" id=\"button-addon2\">\r\n                                        <i className=\"fa fa-search\" aria-hidden=\"true\"></i>\r\n                                    </Button>\r\n                                </InputGroup>\r\n\r\n                            </Col> */}\r\n                            <Col sm={12}>\r\n                                <Form.Group controlId=\"formGridState\">\r\n                                        {/* <Form.Label>Question Type</Form.Label><br/> */}\r\n                                    <ButtonGroup style={{width: \"20%\"}}>\r\n                                        {/* <Button variant=\"outline-secondary\" >\r\n                                            <i className=\"fa fa-table\" aria-hidden=\"true\"></i>&nbsp; Template \r\n                                        </Button> */}\r\n                                        {/* <Button variant=\"outline-secondary\" >\r\n                                            <i className=\"fa fa-cloud-download\" aria-hidden=\"true\"></i>&nbsp; Download \r\n                                        </Button> */}\r\n                                        <Button variant=\"outline-secondary\" onClick={() => setModalShow(true)}>\r\n                                            <i className=\"fa fa-cloud-upload\" aria-hidden=\"true\"></i>&nbsp; Import \r\n                                        </Button>\r\n                                    </ButtonGroup>\r\n                                    \r\n                                    <ActionModal\r\n                                        show={modalShow}\r\n                                        heading=\"Import\"\r\n                                        name={props.name}\r\n                                        onHide={() => setModalShow(false)}\r\n                                    />\r\n                                    \r\n                                </Form.Group>\r\n                                <br/>\r\n                                <DataTable data={data} columns={columns}/>\r\n\r\n                            </Col>\r\n                        </Row>\r\n                        \r\n                    </div>\r\n                    {/* <Card.Text>\r\n                    Some quick example text to build on the card title and make up the bulk of\r\n                    the card's content.\r\n                    </Card.Text> */}\r\n                    {/* <Card.Link href=\"#\">Card Link</Card.Link>\r\n                    <Card.Link href=\"#\">Another Link</Card.Link> */}\r\n                </Card.Body>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PeopleTable;","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\components\\ResponseEvaluation.js",["184"],"import { Row, Col, Table, Accordion, useAccordionButton, Card} from \"react-bootstrap\";\nimport { useState } from \"react\";\n\nfunction CustomToggle({ children, eventKey }) {\n    const [open, setOpen] = useState(false);\n\n    const decoratedOnClick = useAccordionButton(eventKey, () => {\n        console.log('totally custom!');\n        setOpen(!open);\n    });\n  \n    return (\n      <p\n        type=\"button\"\n        style={{}}\n        onClick={decoratedOnClick}\n        className=\"mb-0\"\n      >\n        {children} {open ? <i className=\"fa fa-caret-right fa-fw\" aria-hidden=\"true\"></i> : <i className=\"fa fa-caret-down fa-fw\" aria-hidden=\"true\"></i> }\n      </p>\n    );\n}\n\nfunction ResponseEvaluation(){\n    const questions = [\n        {start: \"Define Laws of La..\", questionType: \"MCQ\", questionId: \"Q1231\"},\n        {start: \"Define Ohms La..\", questionType: \"MCQ\", questionId: \"Q1232\"},\n        {start: \"Define Ohms La..\", questionType: \"MCQ\", questionId: \"Q1233\"},\n        {start: \"Define Kirkoff's La..\", questionType: \"MCQ\", questionId: \"Q1234\"},\n        {start: \"Define Rocket La..\", questionType: \"MCQ\", questionId: \"Q1235\"},\n        {start: \"Define Ohms La..\", questionType: \"MCQ\", questionId: \"Q1236\"},\n        {start: \"Define Invent La..\", questionType: \"MCQ\", questionId: \"Q1237\"},\n        {start: \"Define Ohms La..\", questionType: \"MCQ\", questionId: \"Q1238\"},\n        {start: \"Define Reflection La..\", questionType: \"MCQ\", questionId: \"Q1239\"},\n        {start: \"Define Diffraction La..\", questionType: \"MCQ\", questionId: \"Q1240\"},\n        {start: \"Define Light speed La..\", questionType: \"MCQ\", questionId: \"Q1241\"},\n        {start: \"Define Hello La..\", questionType: \"MCQ\", questionId: \"Q1242\"},\n        {start: \"Define Ohms La..\", questionType: \"MCQ\", questionId: \"Q1243\"},\n    ];\n\n    const [currentQuestion, setCurrentQuestion] = useState( questions[0].questionId );\n\n    const changeQuestion = (questionId) => {\n        setCurrentQuestion(questionId);\n    }\n\n    const nextQuestion = (questionId) => {\n        var currentIndex = 0;\n        for(var i=0; i<questions.length; i++){\n            if(questions[i].questionId === questionId){\n                currentIndex = i;\n                break;\n            }\n        }\n        if(currentIndex < questions.length-1){\n            setCurrentQuestion( questions[currentIndex+1].questionId );\n        }\n    }\n    const prevQuestion = (questionId) => {\n        var currentIndex = 0;\n        for(var i=0; i<questions.length; i++){\n            if(questions[i].questionId === questionId){\n                currentIndex = i;\n                break;\n            }\n        }\n        if(currentIndex > 0){\n            setCurrentQuestion( questions[currentIndex-1].questionId );\n        }\n    }\n    return (\n        <div>\n            <Table bordered responsive className=\"responseDetails\" style={{marginBottom: \"0px\",}}>\n                <tbody>\n                    <tr>\n                        <td><strong>Questions:</strong>50</td>\n                        <td><strong>Marks:</strong> 41/50</td>\n                        <td>manikantapindi9087@gmail.com</td>\n                        <td>E4 CSE</td>\n                    </tr>\n                </tbody>\n            </Table>\n\n            <Row style={{marginTop: \"10px\"}}>\n                <Col xs={12} md={4}>\n                    <div className=\"responseQuestions mb-3\">\n                        {\n                            questions.map((question, idx) => (\n                                <div className=\"responseQueCard\" \n                                    key={idx}\n                                    onClick={(e) => changeQuestion(question.questionId)}\n                                    style={ question.questionId === currentQuestion ? {borderColor: \"gray\", backgroundColor: \"#eee\"} : {}}\n                                >\n                                    <p className=\"mb-0\">\n                                        <span className=\"queNumber\">{idx+1}</span>\n                                        <span className=\"queStart\">{question.start}</span>\n                                    </p>\n                                    <span className=\"questionType\">{question.questionType}</span>\n                                </div>\n                            ))\n                        }\n                        \n                    </div>\n                </Col>\n                <Col xs={12} md={8}>\n                    <div className=\"responseAnsHead\">\n                        <span style={{float: \"left\"}}>\n                            <button style={{backgroundColor: \"white\", border: \"1px solid #0d6efd\", color:\"#0d6efd\", marginLeft: \"0px\"}} onClick={(e) => prevQuestion(currentQuestion)}>\n                                <i className=\"fa fa-caret-left\" aria-hidden=\"true\"></i>&nbsp; Prev\n                            </button>\n                        </span>\n\n                        <span style={{float: \"right\"}}>\n                            <input defaultValue={2} style={{display: \"inline\", width:\"50px\"}} onChange={(e) => {}}/> /5\n                            <button>Award</button>\n                            <button style={{backgroundColor: \"white\", border: \"1px solid #0d6efd\", color:\"#0d6efd\"}} onClick={(e) => nextQuestion(currentQuestion)}>\n                                Next &nbsp;<i className=\"fa fa-caret-right\" aria-hidden=\"true\"></i>\n                            </button>\n                        </span>\n                        \n                    </div>\n                    <div className=\"responseAnswer mb-3 mt-1\">\n                        <Accordion defaultActiveKey=\"\">\n                            <Card>\n                                <Card.Header className=\"text-success\">\n                                    <div>Question - {currentQuestion}</div>\n                                </Card.Header>\n\n                                {/* <Accordion.Collapse eventKey=\"0\"> */}\n                                    <div style={{padding: \"8px 16px\", }}>\n                                        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin aliquam velit vitae felis rutrum, nec facilisis mi blandit. Sed eleifend aliquam nisl, eget molestie leo gravida quis. Nullam interdum facilisis arcu eget ullamcorper. Proin et nibh quam. Sed vel ultrices massa. Nullam rhoncus eros at ullamcorper vulputate. Sed ut maximus neque. Aenean velit elit, consequat at tellus id, condimentum viverra augue.</p>\n                                    </div>\n                                {/* </Accordion.Collapse> */}\n                                \n                            </Card>\n                        </Accordion>\n\n                            <Card className=\"mt-1\">\n                                <Card.Header className=\"text-success\">\n                                    Response\n                                </Card.Header>\n\n                                {/* <Accordion.Collapse eventKey=\"0\"> */}\n                                    <div style={{padding: \"8px 16px\", }}>\n                                        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin aliquam velit vitae felis rutrum, nec facilisis mi blandit. Sed eleifend aliquam nisl, eget molestie leo gravida quis. Nullam interdum facilisis arcu eget ullamcorper. Proin et nibh quam. Sed vel ultrices massa. Nullam rhoncus eros at ullamcorper vulputate. Sed ut maximus neque. Aenean velit elit, consequat at tellus id, condimentum viverra augue.</p>\n                                    </div>\n                                {/* </Accordion.Collapse> */}\n                                \n                            </Card>\n                    </div>\n                </Col>\n            </Row>\n        </div>\n    )\n}\n\nexport default ResponseEvaluation;","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\components\\Sections.js",["185","186"],"import {Accordion, Row, Col, Form, Button} from 'react-bootstrap';\nimport { DragDropContext, Draggable, Droppable} from 'react-beautiful-dnd';\nimport { useState } from 'react';\nimport AddQuestions from './AddQuestions';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addSection, deleteSection, updateSectionDetails, reorderSections } from './../store/reducers/questionsSlice';\n\n\nfunction Sections() {\n    const questionsState = useSelector((state) => state.questionsReducer);\n    const dispatch = useDispatch();\n    \n    const sections = questionsState.sections;\n    const setSections = () => {\n        return null;\n    }\n\n    const saveSection = (e, index) => {\n        e.preventDefault();\n        const sectionDetails = {\n            index: index,\n            sectionName: e.target.sectionName.value,\n            duration: e.target.duration.value,\n            shuffleOptions: e.target.shuffleOptions.checked,\n            shuffleQuestions: e.target.shuffleQuestions.checked,\n        }\n        dispatch( updateSectionDetails(sectionDetails) );\n        console.log(sectionDetails);\n    }\n\n    const grid = 1;\n    const getItemStyle = (isDragging, draggableStyle) => ({\n        // some basic styles to make the items look a bit nicer\n        userSelect: \"none\",\n        paddingTop: grid * 2,\n        paddingBottom: grid * 2,\n        borderRadius: \"5px\",\n\n        // change background colour if dragging\n        background: isDragging ? \"#e7f1ff\" : \"white\",\n\n        // styles we need to apply on draggables\n        ...draggableStyle\n    });\n\n    const getListStyle = isDraggingOver => ({\n        // background: isDraggingOver ? \"lightgrey\" : \"none\",\n        paddingTop: grid,\n        paddingBottom: grid,\n    });\n\n    // a little function to help us with reordering the result\n    // const reorder = (list, startIndex, endIndex) => {\n    //     const result = Array.from(list);\n    //     const [removed] = result.splice(startIndex, 1);\n    //     result.splice(endIndex, 0, removed);\n\n    //     return result;\n    // };\n    // const onDragEnd = (result) => {\n    //     // dropped outside the list\n    //     if (!result.destination) {\n    //       return;\n    //     }\n    \n    //     const items = reorder(\n    //       sections,\n    //       result.source.index,\n    //       result.destination.index\n    //     );\n    \n    //     dispatch( reorderSections(items) );\n        \n    //   }\n\n    return(\n        <div>\n            <DragDropContext onDragEnd={(result) => dispatch( reorderSections({result: result}) )}>\n                <Droppable droppableId=\"droppable\">\n                {(provided, snapshot) => (\n                    <div\n                        {...provided.droppableProps}\n                        ref={provided.innerRef}\n                        style={getListStyle(snapshot.isDraggingOver)}\n                    >\n                    {\n                        sections.map((section, index) => (\n                            <Draggable key={index} draggableId={section.order} index={index}>\n                            {(provided, snapshot) => (\n                                <div\n                                    ref={provided.innerRef}\n                                    {...provided.draggableProps}\n                                    style={getItemStyle(\n                                        snapshot.isDragging,\n                                        provided.draggableProps.style\n                                    )}\n                                    \n                                >\n                                    <div \n                                        {...provided.dragHandleProps}\n                                        style={{textAlign: 'center', color: \"gray\", backgroundColor: \"#eee\", borderRadius: '5px 5px 0px 0px', marginBottom: '-5px', cursor: 'pointer'}}>\n                                        <i className=\"fa fa-ellipsis-h\" aria-hidden=\"true\"></i>\n                                    </div>\n                                    <Accordion key={index} style={{marginBottom: '8px'}}>\n                                        <Accordion.Item eventKey=\"0\">\n                                            <Accordion.Header>\n                                                {section.sectionName + \" - Questions\"}\n                                            </Accordion.Header>\n                                            <Accordion.Body>\n                                                <AddQuestions sectionId={section.sectionId}/>\n                                            </Accordion.Body>\n                                        </Accordion.Item>\n\n                                        <Accordion.Item eventKey=\"1\">\n                                            <Accordion.Header>\n                                                Section - Controls</Accordion.Header>\n                                            <Accordion.Body>\n                                                <Form onSubmit={(e) => saveSection(e, index)} key={section.sectionId}>\n                                                    <Row>\n                                                        <Form.Group className=\"mb-2\" as={Col} sm={12} md={6} controlId=\"sectionName\">\n                                                            <Form.Label>Section Title</Form.Label>\n                                                            <Form.Control type=\"text\" name=\"sectionName\" placeholder=\"Title\" defaultValue={section.sectionName} onChange={() => {}}/>\n                                                        </Form.Group>\n                                                        <Form.Group className=\"mb-2\" as={Col} sm={12} md={6} controlId=\"duration\">\n                                                            <Form.Label>Duration</Form.Label>\n                                                            <Form.Control type=\"number\" name=\"duration\" placeholder=\"In minutes\" defaultValue={section.duration} />\n                                                        </Form.Group>\n                                                        <Form.Group className=\"mb-2\" as={Col} xs={12} sm={6} controlId=\"shuffleQuestions\">\n                                                            <Form.Check \n                                                                type=\"checkbox\"\n                                                                name=\"shuffleQuestions\"\n                                                                id=\"shuffleQuestions\"\n                                                                label=\"Shuffle Questions\"\n                                                                defaultChecked={section.shuffleQuestions}\n                                                            />\n                                                        </Form.Group>\n                                                        <Form.Group className=\"mb-2\" as={Col} xs={12} sm={6} controlId=\"shuffleOptions\">\n                                                            <Form.Check \n                                                                type=\"checkbox\"\n                                                                name=\"shuffleOptions\"\n                                                                id=\"shuffleOptions\"\n                                                                label=\"Shuffle Options\"\n                                                                defaultChecked={section.shuffleOptions}\n                                                            />\n                                                        </Form.Group>\n                                                        <Form.Group className=\"mb-2\" as={Col} xs={6} controlId=\"exampleForm.ControlInput1\" >\n                                                            <Button \n                                                                variant=\"outline-danger\"\n                                                                size=\"sm\" \n                                                                onClick={(e) => dispatch( deleteSection({index: index}) )}\n                                                                style={{width: \"100%\"}}\n                                                            >\n                                                                Delete section <i className='fa fa-trash'></i>\n                                                            </Button>\n                                                        </Form.Group>\n\n                                                        <Form.Group className=\"mb-2\" as={Col} xs={6} controlId=\"exampleForm.ControlInput1\" >\n                                                            <Button \n                                                                variant=\"success\"\n                                                                size=\"sm\" \n                                                                style={{width: \"100%\"}}\n                                                                type=\"submit\"\n                                                            >\n                                                                Save Changes <i className='fa fa-check'></i>\n                                                            </Button>\n                                                        </Form.Group>\n                                                    </Row>\n                                                </Form>\n                                            </Accordion.Body>\n                                        </Accordion.Item>\n                                    </Accordion>\n                                </div>\n                            )}\n                            </Draggable>\n                        ))\n                    }\n                    {provided.placeholder}\n                    </div>\n                )}\n                    \n                </Droppable>\n            </DragDropContext>\n            <Row>\n                <Col>\n                    <Button variant=\"outline-primary\"\n                        onClick={() => dispatch( addSection() )}\n                    >\n                        Add section <i className='fa fa-plus'></i>\n                    </Button>\n                </Col>\n            </Row>\n            \n            \n        </div>\n    )\n}\n\nexport default Sections;","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\store\\reducers\\responsesSlice.js",["187"],"import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n    repsonsesAll: [\n        {responseID: 'R1234', studentID: 'N160099', submitTime: '12/04/2022 - 10:45PM', evalStatus: 'Completed', marksScored: '48.80'},\n        {responseID: 'R1234', studentID: 'N160099', submitTime: '12/04/2022 - 10:45PM', evalStatus: 'Completed', marksScored: '48.80'},\n        {responseID: 'R1234', studentID: 'N160099', submitTime: '12/04/2022 - 10:45PM', evalStatus: 'Pending', marksScored: '48.80'},\n        {responseID: 'R1234', studentID: 'N160099', submitTime: '12/04/2022 - 10:45PM', evalStatus: 'Completed', marksScored: '48.80'},\n    ]\n}\n\nconst resposesSlice = createSlice({\n    name: 'responses',\n    initialState,\n    reducers: {\n\n    }\n})\n\nexport const {  } = resposesSlice.actions;\nexport default resposesSlice.reducer;","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\store\\reducers\\testRolesSlice.js",["188","189","190"],"import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n    students: [],\n    testMakers: [\n      {email: \"jeevan@gmail.com\", name: \"S Jeevan Babu\"},\n      {email: \"manikanta9087@gmail.com\", name: \"MANIKANTA PINDI\"},\n    ],\n    proctors: [\n      {email: \"manikanta9087@gmail.com\", name: \"MANIKANTA PINDI\"},\n      {email: \"sksalma@gmail.com\", name: \"SK SALMA\"},\n    ],\n    evaluators: [\n      {email: \"bhanu@gmail.com\", name: \"BHANU\"},\n      {email: \"jeevan@gmail.com\", name: \"S JEEVAN BABU\"},\n    ],\n    facultyAll: [\n        {email: \"manikanta9087@gmail.com\", name: \"MANIKANTA PINDI\"},\n        {email: \"kashyap@gmail.com\", name: \"S JEEVAN BABU\"},\n        {email: \"bhargav@gmail.com\", name: \"SK SALMA\"},\n        {email: \"reddy@gmail.com\", name: \"BHANU\"},\n    ],\n}\n\nconst testRolesSlice = createSlice({\n  name: 'testRoles',\n  initialState,\n  reducers: {\n    addTestMaker(state, action){\n      if(action.payload.email==null){\n          return;\n      }\n      var emailExists = false;\n      for(var i=0; i<state.testMakers.length; i++){\n          if(state.testMakers[i]['email'] == action.payload.email){\n              emailExists = true;\n          }\n      }\n      if(!emailExists){\n        const name = state.facultyAll.find( (testMaker) => {return testMaker['email'] === action.payload.email} )['name']\n        state.testMakers = [...state.testMakers, {email: action.payload.email, name: name}]\n      }\n    },\n    removeTestMaker(state, action){\n      state.testMakers.splice(action.payload.index,1);\n    },\n    addProctor(state, action){\n      if(action.payload.email==null){\n        return;\n      }\n      var emailExists = false;\n      for(var i=0; i<state.proctors.length; i++){\n          if(state.proctors[i]['email'] == action.payload.email){\n              emailExists = true;\n          }\n      }\n      if(!emailExists){\n        const name = state.facultyAll.find( (proctor) => {return proctor['email'] === action.payload.email} )['name']\n        state.proctors = [...state.proctors, {email: action.payload.email, name: name}]\n      }\n    },\n    removeProctor(state, action){\n      state.proctors.splice(action.payload.index,1);\n    },\n    addEvaluator(state, action){\n      if(action.payload.email==null){\n        return;\n      }\n      var emailExists = false;\n      for(var i=0; i<state.evaluators.length; i++){\n          if(state.evaluators[i]['email'] == action.payload.email){\n              emailExists = true;\n          }\n      }\n      if(!emailExists){\n        const name = state.facultyAll.find( (evaluator) => {return evaluator['email'] === action.payload.email} )['name']\n        state.evaluators = [...state.evaluators, {email: action.payload.email, name: name}]\n      }\n    },\n    removeEvaluator(state, action){\n      state.evaluators.splice(action.payload.index,1);\n    },\n  }\n});\n\nexport const { addTestMaker, removeTestMaker, addProctor, removeProctor, addEvaluator, removeEvaluator } = testRolesSlice.actions;\nexport default testRolesSlice.reducer;\n","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\store\\reducers\\questionsSlice.js",[],"C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\components\\makeData.js",[],"C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\components\\AddQuestions.js",["191","192","193","194","195","196","197","198"],"import {Row, Col, Form, Button, ButtonGroup, ToggleButton, InputGroup, FormControl, } from 'react-bootstrap';\nimport React, { useState } from 'react';\nimport ReactQuill from \"react-quill\";\nimport 'react-quill/dist/quill.snow.css';\nimport QuestionsList from '../components/QuestionsList';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { createQuestion } from './../store/reducers/questionsSlice';\n\n\nfunction AddQuestions(props) {\n\n    const questionsState = useSelector((state) => state.questionsReducer);\n    const dispatch = useDispatch();\n\n    const questionsList = questionsState.sections.find((section) => section.sectionId === props.sectionId).questions;\n\n    const modules =  {\n        toolbar: [\n            [{ 'header': [false] }],\n            ['bold', 'italic', 'underline','strike', 'blockquote'],\n            [{ 'script': 'sub'}, { 'script': 'super' }], \n            [{'list': 'ordered'}, {'list': 'bullet'}, {'indent': '-1'}, {'indent': '+1'}],\n            ['link', 'image'],\n            ['clean']\n        ],\n      }\n    const formats = [\n        'header',\n        'bold', 'italic', 'underline', 'strike', 'blockquote',\n        'script', 'sub', 'super',\n        'list', 'bullet', 'indent',\n        'link', 'image'\n      ]\n    \n    const optionsModules = {\n        toolbar: [\n            ['bold', 'italic', 'underline'],\n            [{ 'script': 'sub'}, { 'script': 'super' }], \n            [],\n            ['link', 'image'],\n            ['clean']\n        ]\n    }\n    const optionsFormats = [\n        'bold', 'italic', 'underline',\n        'script', 'sub', 'super',\n        'link', 'image'\n      ]\n\n    const [questionText, setQuestionText] = useState(\"\");\n    const [maxMarks, setMaxMarks] = useState(1);\n    const [editQuestion, setEditQuestion] = useState(false);\n    const [shuffleOptions, setShuffleOptions] = useState(true);\n    \n\n    const [ options, setOptions ] = useState( [ \n        {id:1, right: \"true\", value:\"\"}, \n        {id:2, right: \"false\", value:\"\"}, \n        {id:3, right: \"false\", value:\"\"}, \n        {id:4, right: \"false\", value:\"\"}, \n\n    ] );\n    const [inputAns, setInputAns] = useState( \"\" );\n\n    const [qTypeValue, setQTypeValue] = useState('1');\n    const questionTypes = [\n        { name: 'MCQ', value: '1' },\n        { name: 'MAQ', value: '2' },\n        { name: 'Input', value: '3' },\n        { name: 'Essay', value: '4' },\n        { name: 'File', value: '5' },\n    ];\n\n    const typeIcons = [\"dot-circle-o\", \"check-square\", \"text-width\", \"align-justify\", \"file-text\"];\n\n    const handleOptions = (index, value) => {\n        const tempOptions = [...options];\n        tempOptions[index-1]['value'] = value;\n        setOptions([...tempOptions]);\n        //console.log(value);\n    }\n    const handleQuestion = (value) => {\n        setQuestionText(value);\n        //console.log(value);\n    }\n    const handleMCQAnswers = (index) => {\n        const tempOptions = [...options];\n\n        for(var i=0; i<tempOptions.length; i++){\n            tempOptions[i]['right'] = \"false\";\n        }\n        tempOptions[index-1]['right'] = \"true\";\n        \n        setOptions([...tempOptions]);\n    }\n    const handleMSQAnswers = (index) => {\n        const tempOptions = [...options];\n\n        if(tempOptions[index-1]['right'] == \"true\"){\n            tempOptions[index-1]['right'] = \"false\";\n        }\n        else{\n            tempOptions[index-1]['right'] = \"true\";\n        }\n        \n        \n        setOptions([...tempOptions]);\n    }\n\n    const addOption = () => {\n        let n = options.length + 1 ;\n        const tempOptions = [...options, {id:n, right: \"false\", value: \"\"} ];\n        \n        setOptions([...tempOptions]);\n    }\n    \n    function optionRemove(e, index){\n       \n        var tempOptions = [...options];\n        tempOptions.splice(index-1, 1);\n        for (var i=0; i<tempOptions.length; i++){\n            tempOptions[i].id = i+1;\n        }\n        console.log(tempOptions);\n        setOptions([...tempOptions]);\n    }\n\n    const handleColorChange = (value) => {\n        if(value == \"true\")\n            return \"rgba(100,255,100,0.4)\";\n        else\n            return \"#ffffff\";\n    }\n\n    const saveQuestion = () => {\n        const questionData = {\n            questionType: qTypeValue,\n            questionText: questionText,\n            maxMarks: maxMarks,\n            shuffleOptions: shuffleOptions,\n            options: options,\n        }\n\n        console.log(\"Question saved\");\n        dispatch( createQuestion(questionData) );\n        setEditQuestion(false);\n\n        setQTypeValue(1);\n        setQuestionText(\"\");\n        setMaxMarks(1);\n        setShuffleOptions(false);\n        setOptions([\n            {id:1, right: \"true\", value:\"\"}, \n            {id:2, right: \"false\", value:\"\"}, \n            {id:3, right: \"false\", value:\"\"}, \n            {id:4, right: \"false\", value:\"\"}, \n        ]);\n    }\n\n    const onSelectQuestion = (questionId) => {\n        setEditQuestion(true);\n        handleQuestion(questionId);\n    }\n\n\n\n    return (\n        <div>\n            <Row>\n                <Col md={3}>\n                    <h6>Questions - {props.sectionId}</h6>\n\n                    <QuestionsList questionsList={questionsList} onSelectQuestion={onSelectQuestion}/>\n                </Col>\n                <Col md={9}>\n                    <div style={{display: editQuestion?'none':'block'}}>\n                        <h6>Create/Add questions</h6>\n                        <div>\n                            <Row>\n                                <Col xs={12} sm={6} >\n                                    <Button \n                                        variant=\"outline-primary\" \n                                        style={{display: 'block', width: '100%'}}\n                                        onClick={(e) => {setEditQuestion(true)}}\n                                        className=\"mb-2\"\n                                    > \n                                    New question &nbsp;<i className='fa fa-plus' aria-hidden=\"true\"></i>\n                                    </Button>\n                                    \n                                </Col>\n                                <Col xs={12} sm={6}>\n                                    <InputGroup className=\"mb-2\">\n                                        <FormControl\n                                        placeholder=\"Question ID\"\n                                        aria-label=\"Question ID\"\n                                        aria-describedby=\"basic-addon2\"\n                                        />\n                                        <Button \n                                            variant=\"secondary\" \n                                            id=\"button-addon2\"\n                                            onClick={(e) => {setEditQuestion(true)}}\n                                        >\n                                        Clone\n                                        </Button>\n                                    </InputGroup>\n                                </Col> \n                            </Row>\n                        </div>\n                    </div>\n                \n                    <div  style={{display: editQuestion?'block':'none'}}>\n                        <h6>Question Type</h6>\n                        <div className='gutter-space'>\n                            <Row>\n\n                                <Form.Group as={Col} controlId=\"formGridState\">\n                                    {/* <Form.Label>Question Type</Form.Label><br/> */}\n                                    <ButtonGroup style={{width: \"100%\"}}>\n                                        {questionTypes.map((type, idx) => (\n                                            <ToggleButton\n                                                key={idx}\n                                                id={`radio-${idx}`}\n                                                type=\"radio\"\n                                                variant={'outline-primary'}\n                                                name=\"radio\"\n                                                value={type.value}\n                                                checked={qTypeValue === type.value}\n                                                active={qTypeValue === type.value}\n                                                onChange={(e) => setQTypeValue(e.target.value)}\n                                            >\n                                                <i className={\"fa fa-\"+typeIcons[idx]}></i> {'  '} {type.name} \n                                            </ToggleButton>\n                                        ))}\n                                    </ButtonGroup>\n                                </Form.Group>\n                            </Row>\n                            <Row className=\"gutter-space\">                                                                            \n                                <Col md={6} >\n\n                                    <Form.Group controlId=\"formGridEdit\" style={{paddingTop: '8px'}}>\n                                        <Form.Check \n                                            onChange={e => setShuffleOptions(!shuffleOptions)}\n                                            checked={shuffleOptions}\n                                            type=\"checkbox\"\n                                            id=\"custom-switch\"\n                                            label=\"Shuffle Options (if MCQ/MSQ)\"\n                                        />\n                                    </Form.Group>\n                                </Col>\n\n                                <Col md={6}>\n                                    <Form.Control placeholder=\"Max Marks\" type=\"number\" onChange={(e) => setMaxMarks(e.target.value)} value={maxMarks}/>\n                                </Col>\n                                            \n                            </Row>\n                        </div>\n\n\n                        <div className='gutter-space'>\n                            <h6>Question</h6>\n\n                            <ReactQuill\n                                theme='snow'\n                                value={questionText}\n                                onChange={e => handleQuestion(e)}\n                                modules={modules}\n                                formats={formats}\n                                placeholder={\"Enter question..\"}\n                                className=\"questionInput\"\n                            />\n                        </div>\n\n                        <div className='gutter-space'>\n                            {qTypeValue == 1 && \n                                <div>\n                                    <p style={{marginBottom: '5px', fontSize: '15px'}}>Enter options and select the right answer</p>\n                                    {options.map((option, idx) => (\n                                        <Row style={{padding: \"10px 11px 0px 11px\"}} key={idx}>\n                                            <Col xs={1} className=\"optionsButton\" \n                                                style={ \n                                                    {backgroundColor: handleColorChange(option.right)}\n                                                }\n                                                onClick={e => handleMCQAnswers(option.id)}\n                                            > \n                                                <p>{String.fromCharCode(64+option.id) }</p>\n                                                \n                                            </Col>\n\n                                            <Col xs={11} style={{padding: \"0px\"}}>\n                                                <Form key={option.id}>\n                                                    <ReactQuill\n                                                        theme='snow'\n                                                        value={option.value}\n                                                        onChange={e => handleOptions(option.id, e)}\n                                                        modules={optionsModules}\n                                                        formats={optionsFormats}\n                                                        placeholder={\"Enter options..\"}\n                                                        className=\"optionInput\"\n                                                        key={options.id}\n                                                    />\n                                                </Form>\n                                                \n                                            </Col>\n                                            <div style={{textAlign: \"right\", padding: '0px', marginTop: '-5px'}}>\n                                                <span className=\"optionRemove\" onClick={e => optionRemove(e, option.id)}>Remove</span>\n                                            </div>\n                                        </Row>\n                                    ))}\n                                    <Button onClick={addOption}>Add option</Button>\n                                </div>\n                            }\n                            {qTypeValue == 2 && \n                                <div>\n                                    <p style={{marginBottom: '5px', fontSize: '15px'}}>Enter options and select the right answers</p>\n\n                                    {options.map((option, idx) => (\n                                        <Row style={{padding: \"10px 11px 0px 11px\"}} key={idx}>\n                                            <Col xs={1} className=\"optionsButton\" \n                                                style={ \n                                                    {backgroundColor: handleColorChange(option.right)}\n                                                }\n                                                onClick={e => handleMSQAnswers(option.id)}\n                                            > \n                                                <p>{String.fromCharCode(64+option.id) }</p>\n                                                \n                                            </Col>\n\n                                            <Col xs={11} style={{padding: \"0px\"}}>\n                                                <ReactQuill\n                                                    theme='snow'\n                                                    value={option.value}\n                                                    onChange={e => handleOptions(option.id, e)}\n                                                    modules={optionsModules}\n                                                    formats={optionsFormats}\n                                                    placeholder={\"Enter options..\"}\n                                                    className=\"optionInput\"\n                                                />\n                                                \n                                            </Col>\n                                            <div style={{textAlign: \"right\", padding: '0px'}}>\n                                                <span className=\"optionRemove\" onClick={e => optionRemove(e, option.id)}>Remove</span>\n                                            </div>\n                                            \n                                        </Row>\n                                    ))}\n                                    <Button onClick={addOption}>Add option</Button>\n                                </div>\n                            }\n                            {qTypeValue == 3 && \n                                <div>\n                                    <p style={{marginBottom: '5px', fontSize: '15px'}}>Enter correct answer</p>\n\n                                    <Form.Group className=\"mb-3\" controlId=\"formGridAddress1\">\n                                        <Form.Control placeholder=\"This answer will be used for automatic evaluation\" \n                                            onChange={ e => setInputAns(e.target.value) } \n                                            value={inputAns}\n                                        />\n                                    </Form.Group>\n                                </div>\n                            }\n                            {qTypeValue == 4 && \n                                <div>\n                                    <p style={{marginBottom: '5px', fontSize: '15px'}}>Essay</p>\n                                    <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlTextarea1\">\n                                        <Form.Control as=\"textarea\" rows={3} \n                                            placeholder=\"Students will write their answers...\"\n                                            disabled={true}\n                                            rows={6}\n                                        />\n                                    </Form.Group>\n                                </div>\n                            }\n                            {qTypeValue == 5 && \n                                <div>\n                                    <p style={{marginBottom: '5px', fontSize: '15px'}}>File Upload</p>\n                                    <Button variant=\"outline-secondary\" disabled style={{display: 'block', width: '100%'}}>\n                                        <i className=\"fa fa-file\"></i>&nbsp;&nbsp;\n                                        Upload file\n                                    </Button>\n                                </div>\n                            }\n                        </div>\n\n                        <div className='gutter-space'>\n                            <Row>\n                                <Col>\n                                    <Button \n                                        variant=\"outline-danger\" \n                                        style={{display: 'block', width: '100%'}}\n                                        onClick={(e) => {saveQuestion()}}\n                                    > \n                                    Discard question &nbsp;\n                                    <i className='fa fa-trash'></i>\n                                    </Button>\n                                    \n                                </Col>\n                                <Col>\n                                    <Button \n                                        variant=\"success\" \n                                        style={{display: 'block', width: '100%'}}\n                                        onClick={(e) => {saveQuestion()}}\n                                    > \n                                    Save question &nbsp;\n                                    <i className='fa fa-check'></i>\n                                    </Button>\n                                </Col> \n                            </Row>\n                        </div>\n\n                    </div>\n\n                    \n                </Col>\n                \n            </Row>\n        </div>\n    );\n}\n\nexport default AddQuestions;","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\components\\DataTable.js",["199","200","201","202","203"],"import React from 'react';\n// import styled from 'styled-components';\nimport { useTable, useSortBy, usePagination, useGlobalFilter, useAsyncDebounce } from 'react-table';\nimport {Table, Pagination, Form, InputGroup} from 'react-bootstrap';\nimport { useState, useMemo } from 'react';\n\nimport makeData from './makeData'\n\n// const Styles = styled.div`\n//   padding: 1rem;\n\n//   table {\n//     border-spacing: 0;\n//     border: 1px solid black;\n\n//     tr {\n//       :last-child {\n//         td {\n//           border-bottom: 0;\n//         }\n//       }\n//     }\n\n//     th,\n//     td {\n//       margin: 0;\n//       padding: 0.5rem;\n//       border-bottom: 1px solid black;\n//       border-right: 1px solid black;\n\n//       :last-child {\n//         border-right: 0;\n//       }\n//     }\n//   }\n// `\n\nconst TWO_HUNDRED_MS = 200;\n\nfunction GlobalFilter({\n  preGlobalFilteredRows,\n  globalFilter,\n  setGlobalFilter,\n}) {\n  const [value, setValue] = useState(globalFilter);\n  const onChange = useAsyncDebounce(value => {\n    setGlobalFilter(value || undefined)\n  }, TWO_HUNDRED_MS);\n\n  return (\n    <InputGroup className=\"mb-1\">\n      <InputGroup.Text id=\"basic-addon1\">\n        <i className='fa fa-search' aria-hidden=\"true\"></i>\n      </InputGroup.Text>\n      <Form.Control\n        value={value || \"\"}\n        onChange={e => {\n          setValue(e.target.value);\n          onChange(e.target.value);\n        }}\n        placeholder={`Search`}\n        type=\"search\"\n      />\n    </InputGroup>\n  )\n}\n\nfunction DTable({ columns, data }) {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page, // Instead of using 'rows', we'll use page,\n    // which has only the rows for the active page\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: { pageIndex, pageSize, globalFilter },\n    visibleColumns,\n    preGlobalFilteredRows,\n    setGlobalFilter,\n\n  } = useTable(\n    {\n      columns,\n      data,\n      initialState: { pageIndex: 0 },\n    },\n    useGlobalFilter,\n    useSortBy,\n    usePagination\n  )\n\n  // We don't want to render all 2000 rows for this example, so cap\n  // it at 20 for this use case\n  // const firstPageRows = rows.slice(0, 20)\n\n  return (\n    <div>\n      <GlobalFilter\n              preGlobalFilteredRows={preGlobalFilteredRows}\n              globalFilter={globalFilter}\n              setGlobalFilter={setGlobalFilter}\n            />\n      <Table {...getTableProps()} bordered hover responsive striped>\n        <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                // Add the sorting props to control sorting. For this example\n                // we can add them into the header props\n                <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                  {column.render('Header')}\n                  {/* Add a sort direction indicator */}\n                  <span>\n                    &nbsp;\n                    {column.isSorted\n                      ? column.isSortedDesc\n                        ? <i className=\"fa fa-sort-desc\" aria-hidden=\"true\"></i>\n                        : <i className=\"fa fa-sort-asc\" aria-hidden=\"true\"></i>\n                      : ''}\n                  </span>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {page.map((row, i) => {\n            prepareRow(row)\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                })}\n              </tr>\n            )\n          })}\n        </tbody>\n      </Table>\n      <br />\n\n      <p>\n          Page{' '}\n          <strong>\n            {pageIndex + 1} of {pageOptions.length}\n          </strong>{' '}\n      </p>\n\n      <div className=\"pagination\" style={{display: \"flex\"}} >\n        <Pagination style={{marginBottom: '0px', flex: \"1\",width:'100%', marginRight: '10px',}}>\n          <Pagination.First onClick={() => gotoPage(0)} disabled={!canPreviousPage}/>\n          <Pagination.Prev onClick={() => previousPage()} disabled={!canPreviousPage}/>\n          \n          <Pagination.Next onClick={() => nextPage(0)} disabled={!canNextPage}/>\n          <Pagination.Last onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}/>\n        </Pagination>\n\n\n\n        {/* <Form.Control\n          type=\"number\"\n          onChange={e => {\n            const page = e.target.value ? Number(e.target.value) - 1 : 0\n            gotoPage(page)\n          }}\n          placeholder=\"Go to page\"\n          style={{marginRight: '10px'}}\n        /> */}\n\n        {/* <Form.Select\n          value={pageSize}\n          onChange={e => {\n            setPageSize(Number(e.target.value))\n          }}\n        >\n          {[10, 20, 30, 40, 50].map(pageSize => (\n            <option key={pageSize} value={pageSize}>\n              Show {pageSize}\n            </option>\n          ))}\n        </Form.Select> */}\n      </div>\n\n    </div>\n  )\n}\n\nfunction DataTable(props) {\n  // const data = useMemo(() => makeData(200), []);\n\n  return (\n    <div>\n      <DTable columns={props.columns} data={props.data} />\n    </div>\n  )\n}\n\nexport default DataTable;\n","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\components\\ExamRoles.js",["204","205","206","207","208","209","210"],"import { Card, Button, ButtonGroup, InputGroup, FormControl, Row, Col, Form} from 'react-bootstrap';\r\nimport DataTable from './DataTable';\r\nimport { useMemo } from 'react';\r\nimport makeData from './makeData';\r\n\r\nfunction ExamRoles(props) {\r\n    const columns = useMemo(\r\n        () => [\r\n            {\r\n            Header: 'First Name',\r\n            accessor: 'firstName'\r\n            },\r\n            {\r\n            Header: 'Last Name',\r\n            accessor: 'lastName',\r\n            },\r\n            {\r\n            Header: 'Age',\r\n            accessor: 'age',\r\n            },\r\n            {\r\n            Header: 'Visits',\r\n            accessor: 'visits',\r\n            },\r\n            {\r\n            Header: 'Status',\r\n            accessor: 'status',\r\n            },\r\n            {\r\n            Header: 'Profile Progress',\r\n            accessor: 'progress',\r\n            },\r\n        ],\r\n        []\r\n    )\r\n    const data = useMemo(() => makeData(200), []);\r\n\r\n    return (\r\n        <div className='people-table'>\r\n            <Card>\r\n                <Card.Body>\r\n                    <Card.Title>{props.name}</Card.Title>\r\n                    \r\n                    <div>\r\n                    <DataTable data = {data} columns={columns}/>\r\n                    </div>\r\n                        \r\n                    {/* <Card.Link href=\"#\">Card Link</Card.Link>\r\n                    <Card.Link href=\"#\">Another Link</Card.Link> */}\r\n                </Card.Body>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ExamRoles;","C:\\Users\\MANI PINDI\\Dropbox\\Desktop\\React JS\\Major\\Back Users\\admin\\exam-admin-side\\src\\components\\QuestionsList.js",["211"],"import React, { useState } from 'react';\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\nimport { useDispatch } from 'react-redux';\nimport { reorderQuestions } from './../store/reducers/questionsSlice';\n\n\n\nfunction QuestionsList(props) {\n    const dispatch = useDispatch();\n\n    const grid = 1;\n    const getItemStyle = (isDragging, draggableStyle) => ({\n        // some basic styles to make the items look a bit nicer\n        userSelect: \"none\",\n        padding: grid * 2,\n\n        // change background colour if dragging\n        background: isDragging ? \"#e7f1ff\" : \"white\",\n\n        // styles we need to apply on draggables\n        ...draggableStyle\n    });\n\n    const getListStyle = isDraggingOver => ({\n        // background: isDraggingOver ? \"lightgrey\" : \"none\",\n        padding: grid,\n        // width: 250\n    });\n\n    return (\n        <div>\n            <DragDropContext onDragEnd={(result) => dispatch( reorderQuestions({result: result, sectionId: props.sectionId}) )}>\n                <Droppable droppableId=\"droppable\">\n                {(provided, snapshot) => (\n                    <div\n                        {...provided.droppableProps}\n                        ref={provided.innerRef}\n                        style={getListStyle(snapshot.isDraggingOver)}\n                    >\n                    {props.questionsList.map((question, index) => (\n                        <Draggable key={question.order} draggableId={question.order} index={index}>\n                        {(provided, snapshot) => (\n                            <div\n                                ref={provided.innerRef}\n                                {...provided.draggableProps}\n                                {...provided.dragHandleProps}\n                                style={getItemStyle(\n                                    snapshot.isDragging,\n                                    provided.draggableProps.style\n                                )}\n                                \n                            >\n                                <div className='question' onClick={() => props.onSelectQuestion(question.questionId)}>\n                                    <p className=\"que-id\">{question.questionId}</p>\n                                    <p className=\"que-head\">{question.Start}</p> \n                                </div>\n                            </div>    \n                            \n                        )}\n                        </Draggable>\n                    ))}\n                    {provided.placeholder}\n                    </div>\n                )}\n                </Droppable>\n            </DragDropContext>\n\n                        {/* <DragDropContext>\n                            <Droppable>\n                            {\n                                questionIds.map((question) =>\n                                    <div key={question.id}>\n                                        <Question id={question.questionId} />\n                                    </div>\n                                )\n                            }\n                            </Droppable>\n                        </DragDropContext> */}\n        </div>\n    );\n}\n\nexport default QuestionsList;",{"ruleId":"212","replacedBy":"213"},{"ruleId":"214","replacedBy":"215"},{"ruleId":"216","severity":1,"message":"217","line":4,"column":9,"nodeType":"218","messageId":"219","endLine":4,"endColumn":15},{"ruleId":"216","severity":1,"message":"220","line":4,"column":17,"nodeType":"218","messageId":"219","endLine":4,"endColumn":20},{"ruleId":"216","severity":1,"message":"221","line":4,"column":22,"nodeType":"218","messageId":"219","endLine":4,"endColumn":25},{"ruleId":"216","severity":1,"message":"222","line":19,"column":9,"nodeType":"218","messageId":"219","endLine":19,"endColumn":17},{"ruleId":"216","severity":1,"message":"223","line":1,"column":33,"nodeType":"218","messageId":"219","endLine":1,"endColumn":44},{"ruleId":"216","severity":1,"message":"224","line":5,"column":10,"nodeType":"218","messageId":"219","endLine":5,"endColumn":16},{"ruleId":"216","severity":1,"message":"222","line":8,"column":11,"nodeType":"218","messageId":"219","endLine":8,"endColumn":19},{"ruleId":"216","severity":1,"message":"225","line":10,"column":11,"nodeType":"218","messageId":"219","endLine":10,"endColumn":18},{"ruleId":"216","severity":1,"message":"226","line":1,"column":45,"nodeType":"218","messageId":"219","endLine":1,"endColumn":49},{"ruleId":"216","severity":1,"message":"227","line":1,"column":64,"nodeType":"218","messageId":"219","endLine":1,"endColumn":74},{"ruleId":"216","severity":1,"message":"228","line":1,"column":76,"nodeType":"218","messageId":"219","endLine":1,"endColumn":89},{"ruleId":"216","severity":1,"message":"229","line":10,"column":11,"nodeType":"218","messageId":"219","endLine":10,"endColumn":21},{"ruleId":"230","severity":1,"message":"231","line":71,"column":60,"nodeType":"232","messageId":"233","endLine":71,"endColumn":62},{"ruleId":"216","severity":1,"message":"217","line":1,"column":9,"nodeType":"218","messageId":"219","endLine":1,"endColumn":15},{"ruleId":"216","severity":1,"message":"221","line":1,"column":22,"nodeType":"218","messageId":"219","endLine":1,"endColumn":25},{"ruleId":"216","severity":1,"message":"234","line":1,"column":38,"nodeType":"218","messageId":"219","endLine":1,"endColumn":41},{"ruleId":"216","severity":1,"message":"235","line":3,"column":10,"nodeType":"218","messageId":"219","endLine":3,"endColumn":14},{"ruleId":"216","severity":1,"message":"236","line":1,"column":31,"nodeType":"218","messageId":"219","endLine":1,"endColumn":40},{"ruleId":"216","severity":1,"message":"237","line":1,"column":42,"nodeType":"218","messageId":"219","endLine":1,"endColumn":46},{"ruleId":"216","severity":1,"message":"220","line":1,"column":48,"nodeType":"218","messageId":"219","endLine":1,"endColumn":51},{"ruleId":"216","severity":1,"message":"221","line":1,"column":53,"nodeType":"218","messageId":"219","endLine":1,"endColumn":56},{"ruleId":"216","severity":1,"message":"227","line":1,"column":58,"nodeType":"218","messageId":"219","endLine":1,"endColumn":68},{"ruleId":"216","severity":1,"message":"217","line":1,"column":70,"nodeType":"218","messageId":"219","endLine":1,"endColumn":76},{"ruleId":"216","severity":1,"message":"238","line":6,"column":21,"nodeType":"218","messageId":"219","endLine":6,"endColumn":29},{"ruleId":"216","severity":1,"message":"239","line":15,"column":5,"nodeType":"218","messageId":"219","endLine":15,"endColumn":21},{"ruleId":"216","severity":1,"message":"240","line":18,"column":11,"nodeType":"218","messageId":"219","endLine":18,"endColumn":22},{"ruleId":"216","severity":1,"message":"241","line":27,"column":11,"nodeType":"218","messageId":"219","endLine":27,"endColumn":26},{"ruleId":"216","severity":1,"message":"221","line":1,"column":10,"nodeType":"218","messageId":"219","endLine":1,"endColumn":13},{"ruleId":"216","severity":1,"message":"220","line":1,"column":26,"nodeType":"218","messageId":"219","endLine":1,"endColumn":29},{"ruleId":"216","severity":1,"message":"242","line":1,"column":10,"nodeType":"218","messageId":"219","endLine":1,"endColumn":19},{"ruleId":"216","severity":1,"message":"243","line":5,"column":22,"nodeType":"218","messageId":"219","endLine":5,"endColumn":33},{"ruleId":"216","severity":1,"message":"225","line":17,"column":11,"nodeType":"218","messageId":"219","endLine":17,"endColumn":18},{"ruleId":"216","severity":1,"message":"244","line":1,"column":18,"nodeType":"218","messageId":"219","endLine":1,"endColumn":23},{"ruleId":"216","severity":1,"message":"238","line":2,"column":17,"nodeType":"218","messageId":"219","endLine":2,"endColumn":25},{"ruleId":"216","severity":1,"message":"245","line":7,"column":8,"nodeType":"218","messageId":"219","endLine":7,"endColumn":22},{"ruleId":"216","severity":1,"message":"238","line":4,"column":9,"nodeType":"218","messageId":"219","endLine":4,"endColumn":17},{"ruleId":"216","severity":1,"message":"246","line":33,"column":11,"nodeType":"218","messageId":"219","endLine":33,"endColumn":25},{"ruleId":"216","severity":1,"message":"247","line":4,"column":10,"nodeType":"218","messageId":"219","endLine":4,"endColumn":22},{"ruleId":"216","severity":1,"message":"238","line":3,"column":10,"nodeType":"218","messageId":"219","endLine":3,"endColumn":18},{"ruleId":"216","severity":1,"message":"248","line":14,"column":11,"nodeType":"218","messageId":"219","endLine":14,"endColumn":22},{"ruleId":"249","severity":1,"message":"250","line":20,"column":14,"nodeType":"251","messageId":"233","endLine":20,"endColumn":18},{"ruleId":"230","severity":1,"message":"252","line":35,"column":43,"nodeType":"232","messageId":"233","endLine":35,"endColumn":45},{"ruleId":"230","severity":1,"message":"252","line":53,"column":41,"nodeType":"232","messageId":"233","endLine":53,"endColumn":43},{"ruleId":"230","severity":1,"message":"252","line":71,"column":43,"nodeType":"232","messageId":"233","endLine":71,"endColumn":45},{"ruleId":"230","severity":1,"message":"252","line":99,"column":42,"nodeType":"232","messageId":"233","endLine":99,"endColumn":44},{"ruleId":"230","severity":1,"message":"252","line":129,"column":18,"nodeType":"232","messageId":"233","endLine":129,"endColumn":20},{"ruleId":"230","severity":1,"message":"252","line":274,"column":41,"nodeType":"232","messageId":"233","endLine":274,"endColumn":43},{"ruleId":"230","severity":1,"message":"252","line":312,"column":41,"nodeType":"232","messageId":"233","endLine":312,"endColumn":43},{"ruleId":"230","severity":1,"message":"252","line":349,"column":41,"nodeType":"232","messageId":"233","endLine":349,"endColumn":43},{"ruleId":"230","severity":1,"message":"252","line":361,"column":41,"nodeType":"232","messageId":"233","endLine":361,"endColumn":43},{"ruleId":"253","severity":1,"message":"254","line":368,"column":45,"nodeType":"255","messageId":"256","endLine":368,"endColumn":53},{"ruleId":"230","severity":1,"message":"252","line":373,"column":41,"nodeType":"232","messageId":"233","endLine":373,"endColumn":43},{"ruleId":"216","severity":1,"message":"257","line":5,"column":20,"nodeType":"218","messageId":"219","endLine":5,"endColumn":27},{"ruleId":"216","severity":1,"message":"258","line":7,"column":8,"nodeType":"218","messageId":"219","endLine":7,"endColumn":16},{"ruleId":"216","severity":1,"message":"259","line":83,"column":5,"nodeType":"218","messageId":"219","endLine":83,"endColumn":16},{"ruleId":"216","severity":1,"message":"260","line":84,"column":25,"nodeType":"218","messageId":"219","endLine":84,"endColumn":33},{"ruleId":"216","severity":1,"message":"261","line":85,"column":5,"nodeType":"218","messageId":"219","endLine":85,"endColumn":19},{"ruleId":"216","severity":1,"message":"217","line":1,"column":16,"nodeType":"218","messageId":"219","endLine":1,"endColumn":22},{"ruleId":"216","severity":1,"message":"262","line":1,"column":24,"nodeType":"218","messageId":"219","endLine":1,"endColumn":35},{"ruleId":"216","severity":1,"message":"227","line":1,"column":37,"nodeType":"218","messageId":"219","endLine":1,"endColumn":47},{"ruleId":"216","severity":1,"message":"263","line":1,"column":49,"nodeType":"218","messageId":"219","endLine":1,"endColumn":60},{"ruleId":"216","severity":1,"message":"220","line":1,"column":62,"nodeType":"218","messageId":"219","endLine":1,"endColumn":65},{"ruleId":"216","severity":1,"message":"221","line":1,"column":67,"nodeType":"218","messageId":"219","endLine":1,"endColumn":70},{"ruleId":"216","severity":1,"message":"237","line":1,"column":72,"nodeType":"218","messageId":"219","endLine":1,"endColumn":76},{"ruleId":"216","severity":1,"message":"238","line":1,"column":17,"nodeType":"218","messageId":"219","endLine":1,"endColumn":25},"no-native-reassign",["264"],"no-negated-in-lhs",["265"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'Row' is defined but never used.","'Col' is defined but never used.","'dispatch' is assigned a value but never used.","'NavDropdown' is defined but never used.","'logout' is defined but never used.","'navitem' is assigned a value but never used.","'Card' is defined but never used.","'InputGroup' is defined but never used.","'FloatingLabel' is defined but never used.","'testsState' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Nav' is defined but never used.","'Link' is defined but never used.","'Accordion' is defined but never used.","'Form' is defined but never used.","'useState' is defined but never used.","'minStartDateTime' is assigned a value but never used.","'testDetails' is assigned a value but never used.","'saveTestDetails' is assigned a value but never used.","'Container' is defined but never used.","'setTestData' is assigned a value but never used.","'Table' is defined but never used.","'responsesSlice' is defined but never used.","'openFileUpload' is assigned a value but never used.","'CustomToggle' is defined but never used.","'setSections' is assigned a value but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","Expected '===' and instead saw '=='.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'useMemo' is defined but never used.","'makeData' is defined but never used.","'setPageSize' is assigned a value but never used.","'pageSize' is assigned a value but never used.","'visibleColumns' is assigned a value but never used.","'ButtonGroup' is defined but never used.","'FormControl' is defined but never used.","no-global-assign","no-unsafe-negation"]